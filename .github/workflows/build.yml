name: üõ†Ô∏è Build PHP for ARMv7a Android (Full Extensions)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      NDK_VERSION: r25c
      PHP_VERSION: 7.4.33
      API_LEVEL: 24           # Android 7.0 minimum untuk ARMv7a
      WORKDIR: build-arm32
      OUTDIR: output-arm32
    steps:
    - name: üì• Checkout repo
      uses: actions/checkout@v4

    - name: ‚öôÔ∏è Install host dependencies
      run: |
        sudo apt update
        sudo apt install -y autoconf automake libtool pkg-config \
          bison re2c make wget unzip file python3 cmake git \
          # Dependensi host untuk membangun skrip, bukan cross-libs:
          libssl-dev libcurl4-openssl-dev zlib1g-dev libxml2-dev libonig-dev \
          libpng-dev libjpeg-dev libfreetype6-dev libsqlite3-dev

    - name: üõ†Ô∏è Download and unpack Android NDK
      run: |
        # Unduh NDK r25c
        wget -q https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip
        unzip -q android-ndk-${NDK_VERSION}-linux.zip
        # Set NDK_HOME relatif ke direktori workspace
        echo "NDK_HOME=$PWD/android-ndk-${NDK_VERSION}" >> $GITHUB_ENV
        echo "TOOLCHAIN=$PWD/android-ndk-${NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64" >> $GITHUB_ENV
        # Tambahkan clang toolchain ke PATH
        echo "PATH=$PWD/android-ndk-${NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH" >> $GITHUB_ENV
        # Staging dir untuk cross libs
        echo "PREFIX=$PWD/android-root" >> $GITHUB_ENV
        # Sysroot
        echo "SYSROOT=$PWD/android-ndk-${NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/sysroot" >> $GITHUB_ENV

    - name: üõ†Ô∏è Setup cross-compiler vars
      run: |
        # Toolchain clang untuk ARMv7a, API_LEVEL 24
        echo "CC=armv7a-linux-androideabi${API_LEVEL}-clang" >> $GITHUB_ENV
        echo "CXX=armv7a-linux-androideabi${API_LEVEL}-clang++" >> $GITHUB_ENV
        echo "AR=llvm-ar" >> $GITHUB_ENV
        echo "RANLIB=llvm-ranlib" >> $GITHUB_ENV
        echo "STRIP=llvm-strip" >> $GITHUB_ENV
        # Flags umum
        # -fPIE -fPIC diperlukan untuk Android
        CFLAGS="-Os -march=armv7-a -mthumb -mfloat-abi=softfp -mfpu=neon \
          -fPIE -fPIC --sysroot=$SYSROOT"
        LDFLAGS="-fPIE -pie --sysroot=$SYSROOT -Wl,--fix-cortex-a8 -Wl,--no-undefined"
        echo "CFLAGS=$CFLAGS" >> $GITHUB_ENV
        echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$PREFIX/include" >> $GITHUB_ENV
        echo "LDFLAGS_EXTRA=-L$PREFIX/lib" >> $GITHUB_ENV
        # Untuk link: log, m, dl
        echo "LIBS='-llog -lm -ldl'" >> $GITHUB_ENV

    - name: üóÇÔ∏è Prepare build directories
      run: |
        mkdir -p $WORKDIR
        mkdir -p $OUTDIR
        mkdir -p android-root/include android-root/lib

    - name: üî® Cross-build zlib
      working-directory: $WORKDIR
      run: |
        wget -q https://zlib.net/zlib-1.3.tar.gz
        tar -xzf zlib-1.3.tar.gz
        cd zlib-1.3
        CC=$CC CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" \
          ./configure --prefix=$PREFIX --static
        make -j$(nproc)
        make install
        cd ..

    - name: üî® Cross-build oniguruma (mbstring)
      working-directory: $WORKDIR
      run: |
        git clone --depth 1 https://github.com/kkos/oniguruma.git
        cd oniguruma
        autoreconf -fi
        CC=$CC CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" \
          ./configure --host=arm-linux-androideabi --prefix=$PREFIX --disable-shared --enable-static
        make -j$(nproc)
        make install
        cd ..

    - name: üî® Cross-build libxml2
      working-directory: $WORKDIR
      run: |
        wget -q https://download.gnome.org/sources/libxml2/2.11/libxml2-2.11.5.tar.xz
        tar -xf libxml2-2.11.5.tar.xz
        cd libxml2-2.11.5
        CC=$CC CFLAGS="$CFLAGS -DNO_SOCKLEN_T" LDFLAGS="$LDFLAGS" \
          ./configure --host=arm-linux-androideabi \
            --prefix=$PREFIX \
            --without-python \
            --without-lzma \
            --enable-static --disable-shared
        make -j$(nproc)
        make install
        cd ..

    - name: üî® Cross-build libpng
      working-directory: $WORKDIR
      run: |
        wget -q https://download.sourceforge.net/libpng/libpng-1.6.40.tar.gz
        tar -xzf libpng-1.6.40.tar.gz
        cd libpng-1.6.40
        CC=$CC CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" \
          ./configure --host=arm-linux-androideabi --prefix=$PREFIX \
            --enable-static --disable-shared
        make -j$(nproc)
        make install
        cd ..

    - name: üî® Cross-build libjpeg-turbo
      working-directory: $WORKDIR
      run: |
        wget -q https://downloads.sourceforge.net/libjpeg-turbo/libjpeg-turbo-2.1.5.1.tar.gz
        tar -xzf libjpeg-turbo-2.1.5.1.tar.gz
        cd libjpeg-turbo-2.1.5.1
        mkdir build && cd build
        cmake .. \
          -DCMAKE_SYSTEM_NAME=Android \
          -DANDROID_ABI=armeabi-v7a \
          -DANDROID_PLATFORM=android-${API_LEVEL} \
          -DCMAKE_ANDROID_NDK=$NDK_HOME \
          -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=clang \
          -DCMAKE_C_COMPILER=$CC \
          -DCMAKE_C_FLAGS="$CFLAGS" \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DENABLE_SHARED=OFF -DENABLE_STATIC=ON
        make -j$(nproc)
        make install
        cd ../..

    - name: üî® Cross-build freetype
      working-directory: $WORKDIR
      run: |
        wget -q https://download.savannah.gnu.org/releases/freetype/freetype-2.13.0.tar.xz
        tar -xf freetype-2.13.0.tar.xz
        cd freetype-2.13.0
        CC=$CC CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" \
          ./configure --host=arm-linux-androideabi --prefix=$PREFIX \
            --enable-static --disable-shared \
            --with-zlib=yes --with-png=yes --with-harfbuzz=no
        make -j$(nproc)
        make install
        cd ..

    - name: üìÑ Download PHP source
      run: |
        wget -q https://www.php.net/distributions/php-${PHP_VERSION}.tar.gz
        tar -xzf php-${PHP_VERSION}.tar.gz
        echo "PHP_SOURCE=$PWD/php-${PHP_VERSION}" >> $GITHUB_ENV

    - name: ‚öôÔ∏è Configure PHP
      working-directory: $WORKDIR
      run: |
        export CC=$CC
        export CXX=$CXX
        export AR=$AR
        export RANLIB=$RANLIB
        export STRIP=$STRIP
        export CFLAGS="$CFLAGS"
        export LDFLAGS="$LDFLAGS $LDFLAGS_EXTRA"
        export CPPFLAGS="-I$PREFIX/include"
        export LIBS="$LIBS -L$PREFIX/lib"
        # configure PHP dengan ekstensi dasar
        ../php-${PHP_VERSION}/configure \
          --host=arm-linux-androideabi \
          --build=$(./config.guess) \
          --prefix=/php \
          --disable-all \
          --enable-mbstring \
          --enable-bcmath \
          --enable-json \
          --enable-session \
          --enable-posix \
          --enable-sockets \
          --enable-shmop \
          --enable-sysvmsg \
          --enable-sysvsem \
          --enable-sysvshm \
          --enable-tokenizer \
          --enable-xml \
          --enable-dom \
          --enable-simplexml \
          --enable-xmlreader \
          --enable-xmlwriter \
          --enable-soap \
          --enable-phar \
          --enable-fileinfo \
          --enable-calendar \
          --enable-ftp \
          --enable-exif \
          --enable-gd \
          --enable-opcache \
          --enable-zip \
          --with-zlib=$PREFIX \
          --with-iconv \
          --with-gd \
          --with-jpeg \
          --with-freetype \
          --with-png \
          --with-libxml=$PREFIX \
          --without-pear \
          --disable-cgi \
          --disable-fpm \
          --with-openssl=no \
          --with-curl=no
        # Catatan: openssl/curl di-skip kecuali cross-build OpenSSL & cURL ditambahkan

    - name: üß± Build PHP
      working-directory: $WORKDIR
      run: |
        make -j$(nproc)
        make install INSTALL_ROOT=$(pwd)/../${OUTDIR}

    - name: üßπ Post-install setup
      run: |
        # Copy php.ini dari source (development) ke output
        cp php-${PHP_VERSION}/php.ini-development ${OUTDIR}/php/lib/php.ini
        {
          echo "date.timezone = UTC"
          echo "display_errors = Off"
          echo "short_open_tag = On"
          echo "enable_dl = On"
          echo "extension_dir = /php/lib/php/extensions/no-debug-non-zts-20190902"
          # Aktifkan extension sesuai build
          for ext in bcmath exif gd mbstring phar posix shmop soap sockets sysvmsg sysvsem sysvshm xml zip; do
            echo "extension=${ext}.so"
          done
        } >> ${OUTDIR}/php/lib/php.ini

    - name: ‚úÇÔ∏è Strip binaries
      run: |
        $STRIP --strip-unneeded ${OUTDIR}/php/bin/php
        find ${OUTDIR}/php/lib/ -name "*.so" -exec $STRIP --strip-unneeded {} \;

    - name: üîç Verify build
      run: |
        file ${OUTDIR}/php/bin/php
        # Gunakan readelf jika tersedia
        if command -v arm-linux-androideabi-readelf >/dev/null 2>&1; then
          arm-linux-androideabi-readelf -h ${OUTDIR}/php/bin/php | grep 'Machine:'
        fi
        echo "PHP version:"
        ${OUTDIR}/php/bin/php -v || true

    - name: üì¶ Package output
      run: |
        tar -czf php-arm32-full-android.tar.gz -C ${OUTDIR} .

    - name: ‚òÅÔ∏è Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: php-arm32-android-full
        path: php-arm32-full-android.tar.gz
