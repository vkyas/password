name: üõ†Ô∏è Build PHP for ARMv7a Android (Fixed Paths)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: üì• Checkout repo
      uses: actions/checkout@v4

    - name: ‚öôÔ∏è Setup environment
      run: |
        echo "NDK_VERSION=r25c" >> $GITHUB_ENV
        echo "PHP_VERSION=8.4.8" >> $GITHUB_ENV
        echo "API_LEVEL=21" >> $GITHUB_ENV
        echo "WORKDIR=build-arm32" >> $GITHUB_ENV
        echo "OUTDIR=output-arm32" >> $GITHUB_ENV
        echo "NDK_HOME=$GITHUB_WORKSPACE/android-ndk-r25c" >> $GITHUB_ENV
        echo "HOST_TRIPLE=armv7a-linux-androideabi" >> $GITHUB_ENV
        echo "EXTENSION_DIR=/data/adb/php7/files/bin" >> $GITHUB_ENV
        echo "ZEND_EXTENSION_DIR=no-debug-non-zts-20190902" >> $GITHUB_ENV

    - name: üß∞ Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          autoconf automake libtool pkg-config \
          bison re2c make wget unzip file \
          python3 zlib1g-dev libxml2-dev libsqlite3-dev \
          libonig-dev libzip-dev libssl-dev \
          libcurl4-openssl-dev libpng-dev libjpeg-dev \
          libfreetype6-dev libxpm-dev libxslt1-dev \
          libreadline-dev libldap2-dev libargon2-dev

    - name: üì¶ Download Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip

    - name: üõ†Ô∏è Setup toolchain
      run: |
        # Calculate paths based on NDK_HOME
        TOOLCHAIN="${{ env.NDK_HOME }}/toolchains/llvm/prebuilt/linux-x86_64"
        SYSROOT="$TOOLCHAIN/sysroot"
        PREFIX="$SYSROOT/usr"
        
        echo "TOOLCHAIN=$TOOLCHAIN" >> $GITHUB_ENV
        echo "SYSROOT=$SYSROOT" >> $GITHUB_ENV
        echo "PREFIX=$PREFIX" >> $GITHUB_ENV
        
        echo "CC=$TOOLCHAIN/bin/${{ env.HOST_TRIPLE }}${{ env.API_LEVEL }}-clang" >> $GITHUB_ENV
        echo "CXX=$TOOLCHAIN/bin/${{ env.HOST_TRIPLE }}${{ env.API_LEVEL }}-clang++" >> $GITHUB_ENV
        echo "AR=$TOOLCHAIN/bin/llvm-ar" >> $GITHUB_ENV
        echo "RANLIB=$TOOLCHAIN/bin/llvm-ranlib" >> $GITHUB_ENV
        echo "STRIP=$TOOLCHAIN/bin/llvm-strip" >> $GITHUB_ENV
        echo "CFLAGS='-Os -march=armv7-a -mfloat-abi=softfp -mfpu=neon -fPIE -fPIC -I$PREFIX/include'" >> $GITHUB_ENV
        echo "LDFLAGS='-Wl,--fix-cortex-a8 -Wl,--no-undefined -L$PREFIX/lib -fPIE -pie'" >> $GITHUB_ENV
        echo "LIBS='-llog -landroid -lm'" >> $GITHUB_ENV
        echo "PATH=$TOOLCHAIN/bin:$PATH" >> $GITHUB_ENV

    - name: üìÑ Download PHP
      run: |
        wget -q https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz
        tar -xzf php-${{ env.PHP_VERSION }}.tar.gz
        echo "PHP_SOURCE=php-${{ env.PHP_VERSION }}" >> $GITHUB_ENV

    - name: üóÇÔ∏è Create build directory
      run: |
        mkdir -p ${{ env.WORKDIR }}
        mkdir -p ${{ env.OUTDIR }}

    - name: ‚öôÔ∏è Configure PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        # Debug: Show environment variables
        echo "CC: ${{ env.CC }}"
        echo "CFLAGS: ${{ env.CFLAGS }}"
        echo "LDFLAGS: ${{ env.LDFLAGS }}"
        echo "LIBS: ${{ env.LIBS }}"
        echo "TOOLCHAIN: ${{ env.TOOLCHAIN }}"
        echo "SYSROOT: ${{ env.SYSROOT }}"
        
        # Test compiler
        ${{ env.CC }} --version || true
        
        export CC="${{ env.CC }}"
        export CXX="${{ env.CXX }}"
        export AR="${{ env.AR }}"
        export RANLIB="${{ env.RANLIB }}"
        export STRIP="${{ env.STRIP }}"
        export CFLAGS="${{ env.CFLAGS }}"
        export LDFLAGS="${{ env.LDFLAGS }}"
        export LIBS="${{ env.LIBS }}"
        export CPPFLAGS="-I${{ env.PREFIX }}/include"
        
        ../${{ env.PHP_SOURCE }}/configure \
          --host=${{ env.HOST_TRIPLE }} \
          --prefix=/data/php \
          --disable-all \
          --enable-mbstring \
          --enable-bcmath \
          --enable-json \
          --enable-session \
          --enable-posix \
          --enable-sockets \
          --enable-shmop \
          --enable-sysvmsg \
          --enable-sysvsem \
          --enable-sysvshm \
          --enable-tokenizer \
          --enable-xml \
          --enable-dom \
          --enable-simplexml \
          --enable-xmlreader \
          --enable-xmlwriter \
          --enable-soap \
          --enable-phar \
          --enable-fileinfo \
          --enable-calendar \
          --enable-ftp \
          --enable-exif \
          --enable-opcache \
          --enable-ctype \
          --enable-gd \
          --with-zlib \
          --with-iconv \
          --without-bz2 \
          --without-xsl \
          --without-readline \
          --without-ldap \
          --without-pdo-pgsql \
          --without-pear \
          --disable-cgi \
          --disable-fpm

        echo "Configuration complete. Review any warnings above."

    - name: üß± Build PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        make -j$(nproc)
        make install INSTALL_ROOT=$(pwd)/../${{ env.OUTDIR }}

    - name: üßπ Post-install setup
      run: |
        # Create target directory structure
        mkdir -p ${{ env.OUTDIR }}/php/lib/php/extensions/${{ env.ZEND_EXTENSION_DIR }}
        mkdir -p ${{ env.OUTDIR }}/php/bin
        
        # Copy php.ini
        cp ${{ env.PHP_SOURCE }}/php.ini-development ${{ env.OUTDIR }}/php/lib/php.ini
        
        # Basic php.ini configuration
        echo "date.timezone = UTC" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "display_errors = Off" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "short_open_tag = On" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "enable_dl = On" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension_dir = \"${{ env.EXTENSION_DIR }}\"" >> ${{ env.OUTDIR }}/php/lib/php.ini
        
        # Move extensions to target directory
        mv ${{ env.OUTDIR }}/php/lib/php/extensions/${{ env.ZEND_EXTENSION_DIR }}/*.so ${{ env.OUTDIR }}/php/bin/
        
        # Enable extensions
        echo "extension=ctype.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=mbstring.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=gd.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=zip.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=iconv.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=calendar.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=fileinfo.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=bcmath.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=exif.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=phar.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=posix.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=shmop.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=soap.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=sockets.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=sysvmsg.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=sysvsem.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=sysvshm.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=xml.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        
        # Enable opcache as zend extension
        echo "zend_extension=opcache.so" >> ${{ env.OUTDIR }}/php/lib/php.ini

    - name: üßπ Strip binaries
      run: |
        ${{ env.STRIP }} --strip-unneeded ${{ env.OUTDIR }}/php/bin/php
        find ${{ env.OUTDIR }}/php/bin/ -name "*.so" -exec ${{ env.STRIP }} --strip-unneeded {} \;

    - name: üì¶ Package output
      run: |
        tar -czf php-full-arm32.tar.gz -C ${{ env.OUTDIR }} .

    - name: ‚òÅÔ∏è Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: php-full-arm32
        path: php-full-arm32.tar.gz
