# Build PHP for ARMv7a Android
# Corrected workflow for modern NDKs (r23+)

name: Build PHP for ARMv7a Android

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup environment variables
      run: |
        echo "NDK_VERSION=r23c" >> $GITHUB_ENV
        echo "PHP_VERSION=7.4.33" >> $GITHUB_ENV
        echo "CURL_VERSION=8.8.0" >> $GITHUB_ENV
        echo "OPENSSL_VERSION=1.1.1w" >> $GITHUB_ENV
        echo "API_LEVEL=19" >> $GITHUB_ENV
        echo "WORKDIR=$(pwd)/build-arm32" >> $GITHUB_ENV
        echo "OUTDIR=$(pwd)/output-arm32" >> $GITHUB_ENV
        echo "PREFIX=$(pwd)/prefix-arm32" >> $GITHUB_ENV

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          autoconf automake libtool pkg-config bison re2c make wget unzip file python3 \
          zlib1g-dev libxml2-dev libsqlite3-dev libonig-dev

    - name: Download and Extract Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip
        echo "NDK_HOME=$(pwd)/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV

    - name: Setup Toolchain and Compiler
      run: |
        # Set the NDK toolchain bin directory
        TOOLCHAIN_PATH="${{ env.NDK_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/bin"
        echo "PATH=${TOOLCHAIN_PATH}:$PATH" >> $GITHUB_ENV

        # Define the target and compiler names
        TARGET_HOST="armv7a-linux-androideabi"
        CC="${TARGET_HOST}${API_LEVEL}-clang"
        CXX="${TARGET_HOST}${API_LEVEL}-clang++"
        AR="arm-linux-androideabi-ar"
        RANLIB="arm-linux-androideabi-ranlib"
        STRIP="arm-linux-androideabi-strip"

        # Export variables for subsequent steps
        echo "CC=${CC}" >> $GITHUB_ENV
        echo "CXX=${CXX}" >> $GITHUB_ENV
        echo "AR=${AR}" >> $GITHUB_ENV
        echo "RANLIB=${RANLIB}" >> $GITHUB_ENV
        echo "STRIP=${STRIP}" >> $GITHUB_ENV
        echo "CFLAGS=-Os -fPIC -I${{ env.PREFIX }}/include" >> $GITHUB_ENV
        echo "LDFLAGS=-L${{ env.PREFIX }}/lib" >> $GITHUB_ENV

    - name: Build OpenSSL (Static)
      run: |
        wget -q https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
        tar -xzf openssl-${{ env.OPENSSL_VERSION }}.tar.gz
        cd openssl-${{ env.OPENSSL_VERSION }}

        # Configure for android-arm, letting the script use the environment variables
        ./Configure android-arm -D__ANDROID_API__=${{ env.API_LEVEL }} \
          --prefix=${{ env.PREFIX }} \
          no-asm \
          no-shared \
          no-tests

        make -j$(nproc)
        make install_sw # install software without docs

    - name: Build cURL (Static)
      run: |
        wget -q https://curl.se/download/curl-${{ env.CURL_VERSION }}.tar.gz
        tar -xzf curl-${{ env.CURL_VERSION }}.tar.gz
        cd curl-${{ env.CURL_VERSION }}

        ./configure \
          --host=arm-linux-androideabi \
          --prefix=${{ env.PREFIX }} \
          --with-ssl=${{ env.PREFIX }} \
          --disable-shared \
          --enable-static \
          --disable-manual \
          --disable-verbose \
          --without-libpsl \
          --disable-alt-svc

        make -j$(nproc)
        make install

    - name: Download PHP source
      run: |
        wget -q https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz
        tar -xzf php-${{ env.PHP_VERSION }}.tar.gz
        echo "PHP_SOURCE=php-${{ env.PHP_VERSION }}" >> $GITHUB_ENV

    - name: Create build directories
      run: |
        mkdir -p ${{ env.WORKDIR }}
        mkdir -p ${{ env.OUTDIR }}
        mkdir -p ${{ env.PREFIX }}

    - name: Configure PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        # Note: LIBS order matters for static linking.
        # Dependent libraries (-lssl, -lcrypto) go after the libraries that use them.
        ../${{ env.PHP_SOURCE }}/configure \
          --host=arm-linux-androideabi \
          --prefix=/php \
          --disable-all \
          --with-curl=${{ env.PREFIX }} \
          --with-openssl=${{ env.PREFIX }} \
          --with-zlib \
          --enable-bcmath \
          --enable-ctype \
          --enable-dom \
          --enable-fileinfo \
          --enable-filter \
          --enable-json \
          --enable-mbstring \
          --enable-phar \
          --enable-posix \
          --enable-session \
          --enable-simplexml \
          --enable-sockets \
          --enable-tokenizer \
          --enable-xml \
          --enable-xmlreader \
          --enable-xmlwriter \
          --without-pear \
          --disable-cgi \
          --disable-fpm \
          CPPFLAGS="-I${{ env.PREFIX }}/include" \
          LIBS="-lcurl -lssl -lcrypto -lz -ldl -lm"

    - name: Build PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        make -j$(nproc)
        make install INSTALL_ROOT=$(pwd)/../${{ env.OUTDIR }}

    - name: Post-install steps
      run: |
        cp ${{ env.PHP_SOURCE }}/php.ini-production ${{ env.OUTDIR }}/php/lib/php.ini
        sed -i 's/;date.timezone =/date.timezone = UTC/' ${{ env.OUTDIR }}/php/lib/php.ini

    - name: Strip binaries for size reduction
      run: |
        ${{ env.STRIP }} --strip-unneeded ${{ env.OUTDIR }}/php/bin/php
        # No .so files to strip as we built static modules

    - name: Verify binary information
      run: |
        echo "--- File Info ---"
        file ${{ env.OUTDIR }}/php/bin/php
        echo "--- ELF Header ---"
        readelf -h ${{ env.OUTDIR }}/php/bin/php | grep 'Machine:'
        echo "--- Dynamic Dependencies (will likely show 'not a dynamic executable') ---"
        ldd ${{ env.OUTDIR }}/php/bin/php || true

    - name: Package artifacts
      run: |
        tar -czf php-arm32-android.tar.gz -C ${{ env.OUTDIR }} .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: php-arm32-android
        path: php-arm32-android.tar.gz
