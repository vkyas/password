name: üõ†Ô∏è Build PHP for ARMv7a Android (Full Extensions)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: üì• Checkout repo
      uses: actions/checkout@v4

    - name: ‚öôÔ∏è Setup environment
      run: |
        echo "NDK_VERSION=r25c" >> $GITHUB_ENV
        echo "PHP_VERSION=7.4.33" >> $GITHUB_ENV
        echo "API_LEVEL=19" >> $GITHUB_ENV
        echo "WORKDIR=build-arm32" >> $GITHUB_ENV
        echo "OUTDIR=output-arm32" >> $GITHUB_ENV
        echo "NDK_HOME=${{ github.workspace }}/android-ndk-r25c" >> $GITHUB_ENV
        echo "TOOLCHAIN=${NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64" >> $GITHUB_ENV
        echo "SYSROOT=${TOOLCHAIN}/sysroot" >> $GITHUB_ENV
        echo "PREFIX=${SYSROOT}/usr" >> $GITHUB_ENV

    - name: üß∞ Install host dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          autoconf automake libtool pkg-config \
          bison re2c make wget unzip file \
          python3 zlib1g-dev libxml2-dev libsqlite3-dev \
          libonig-dev libzip-dev libssl-dev \
          libcurl4-openssl-dev libpng-dev libjpeg-dev \
          libfreetype6-dev libxpm-dev libxslt1-dev \
          libreadline-dev libldap2-dev libargon2-dev \
          libbz2-dev

    - name: üì¶ Download Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip

    - name: üõ†Ô∏è Setup toolchain
      run: |
        echo "CC=${{ env.TOOLCHAIN }}/bin/armv7a-linux-androideabi${{ env.API_LEVEL }}-clang" >> $GITHUB_ENV
        echo "CXX=${{ env.TOOLCHAIN }}/bin/armv7a-linux-androideabi${{ env.API_LEVEL }}-clang++" >> $GITHUB_ENV
        echo "AR=${{ env.TOOLCHAIN }}/bin/llvm-ar" >> $GITHUB_ENV
        echo "RANLIB=${{ env.TOOLCHAIN }}/bin/llvm-ranlib" >> $GITHUB_ENV
        echo "STRIP=${{ env.TOOLCHAIN }}/bin/llvm-strip" >> $GITHUB_ENV
        echo "CFLAGS=-O2 -march=armv7-a -mfloat-abi=softfp -mfpu=neon -fPIE -fPIC -I${{ env.PREFIX }}/include" >> $GITHUB_ENV
        echo "LDFLAGS=-Wl,--fix-cortex-a8 -Wl,--no-undefined -L${{ env.PREFIX }}/lib -fPIE -pie" >> $GITHUB_ENV
        echo "LIBS=-llog -landroid" >> $GITHUB_ENV
        echo "PATH=${{ env.TOOLCHAIN }}/bin:$PATH" >> $GITHUB_ENV
        echo "CPPFLAGS=-I${{ env.PREFIX }}/include" >> $GITHUB_ENV

    - name: üõ†Ô∏è Build zlib for ARMv7a
      run: |
        wget -q https://zlib.net/zlib-1.3.tar.gz
        tar -xzf zlib-1.3.tar.gz
        cd zlib-1.3
        export CC="${{ env.CC }}"
        export CFLAGS="${{ env.CFLAGS }}"
        export LDFLAGS="${{ env.LDFLAGS }}"
        ./configure --prefix=${{ env.PREFIX }}
        make -j$(nproc)
        make install
        cd ..

    - name: üõ†Ô∏è Build libpng for ARMv7a
      run: |
        wget -q https://downloads.sourceforge.net/project/libpng/libpng16/1.6.44/libpng-1.6.44.tar.gz
        tar -xzf libpng-1.6.44.tar.gz
        cd libpng-1.6.44
        export CC="${{ env.CC }}"
        export CFLAGS="${{ env.CFLAGS }}"
        export LDFLAGS="${{ env.LDFLAGS }}"
        ./configure --host=arm-linux-androideabi --prefix=${{ env.PREFIX }}
        make -j$(nproc)
        make install
        cd ..

    - name: üõ†Ô∏è Build libjpeg for ARMv7a
      run: |
        wget -q http://ijg.org/files/jpegsrc.v9f.tar.gz
        tar -xzf jpegsrc.v9f.tar.gz
        cd jpeg-9f
        export CC="${{ env.CC }}"
        export CFLAGS="${{ env.CFLAGS }}"
        export LDFLAGS="${{ env.LDFLAGS }}"
        ./configure --host=arm-linux-androideabi --prefix=${{ env.PREFIX }}
        make -j$(nproc)
        make install
        cd ..

    - name: üõ†Ô∏è Build freetype for ARMv7a
      run: |
        wget -q https://downloads.sourceforge.net/project/freetype/freetype2/2.13.2/freetype-2.13.2.tar.gz
        tar -xzf freetype-2.13.2.tar.gz
        cd freetype-2.13.2
        export CC="${{ env.CC }}"
        export CFLAGS="${{ env.CFLAGS }}"
        export LDFLAGS="${{ env.LDFLAGS }}"
        ./configure --host=arm-linux-androideabi --prefix=${{ env.PREFIX }} --without-harfbuzz
        make -j$(nproc)
        make install
        cd ..

    - name: üõ†Ô∏è Build libxslt for ARMv7a
      run: |
        wget -q http://xmlsoft.org/sources/libxslt-1.1.42.tar.gz
        tar -xzf libxslt-1.1.42.tar.gz
        cd libxslt-1.1.42
        export CC="${{ env.CC }}"
        export CFLAGS="${{ env.CFLAGS }}"
        export LDFLAGS="${{ env.LDFLAGS }}"
        ./configure --host=arm-linux-androideabi --prefix=${{ env.PREFIX }} --with-libxml-prefix=${{ env.PREFIX‰∏ç‰ªÖÊòØlibxml2-dev
        make -j$(nproc)
        make install
        cd ..

    - name: üõ†Ô∏è Build libbz2 for ARMv7a
      run: |
        wget -q https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
        tar -xzf bzip2-1.0.8.tar.gz
        cd bzip2-1.0.8
        make CFLAGS="${{ env.CFLAGS }}" LDFLAGS="${{ env.LDFLAGS }}" CC="${{ env.CC }}" -j$(nproc)
        make PREFIX=${{ env.PREFIX }} install
        cd ..

    - name: üõ†Ô∏è Build readline for ARMv7a
      run: |
        wget -q https://ftp.gnu.org/gnu/readline/readline-8.2.tar.gz
        tar -xzf readline-8.2.tar.gz
        cd readline-8.2
        export CC="${{ env.CC }}"
        export CFLAGS="${{ env.CFLAGS }}"
        export LDFLAGS="${{ env.LDFLAGS }}"
        ./configure --host=arm-linux-androideabi --prefix=${{ env.PREFIX }}
        make -j$(nproc)
        make install
        cd ..

    - name: üîç Check dependencies
      run: |
        for lib in zlib png jpeg freetype xslt bz2 readline; do
          if [ ! -f "${{ env.PREFIX }}/lib/lib${lib}.a" ] && [ ! -f "${{ env.PREFIX }}/lib/lib${lib}.so" ]; then
            echo "Error: lib${lib} not found in ${{ env.PREFIX }}/lib"
            exit 1
          fi
        done

    - name: üìÑ Download PHP
      run: |
        wget -q https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz
        tar -xzf php-${{ env.PHP_VERSION }}.tar.gz
        echo "PHP_SOURCE=php-${{ env.PHP_VERSION }}" >> $GITHUB_ENV

    - name: üóÇÔ∏è Create build directory
      run: |
        mkdir -p ${{ env.WORKDIR }}
        mkdir -p ${{ env.OUTDIR }}

    - name: ‚öôÔ∏è Configure PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        export CC="${{ env.CC }}"
        export CXX="${{ env.CXX }}"
        export AR="${{ env.AR }}"
        export RANLIB="${{ env.RANLIB }}"
        export STRIP="${{ env.STRIP }}"
        export CFLAGS="${{ env.CFLAGS }}"
        export LDFLAGS="${{ env.LDFLAGS }}"
        export LIBS="${{ env.LIBS }}"
        export CPPFLAGS="${{ env.CPPFLAGS }}"

        ../${{ env.PHP_SOURCE }}/configure \
          --host=arm-linux-androideabi \
          --prefix=/php \
          --disable-all \
          --enable-mbstring \
          --enable-bcmath \
          --enable-json \
          --enable-session \
          --enable-posix \
          --enable-sockets \
          --enable-shmop \
          --enable-sysvmsg \
          --enable-sysvsem \
          --enable-sysvshm \
          --enable-tokenizer \
          --enable-xml \
          --enable-dom \
          --enable-simplexml \
          --enable-xmlreader \
          --enable-xmlwriter \
          --enable-soap \
          --enable-phar \
          --enable-fileinfo \
          --enable-calendar \
          --enable-ftp \
          --enable-exif \
          --enable-gd \
          --enable-opcache \
          --with-zlib=${{ env.PREFIX }} \
          --with-iconv=${{ env.PREFIX }} \
          --with-bz2=${{ env.PREFIX }} \
          --with-xsl=${{ env.PREFIX }} \
          --with-readline=${{ env.PREFIX }} \
          --without-pear \
          --disable-cgi \
          --disable-fpm \
          > configure.log 2>&1 || { cat configure.log; exit 1; }

    - name: üß± Build PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        make -j$(nproc)
        make install INSTALL_ROOT=$(pwd)/../${{ env.OUTDIR }}

    - name: üßπ Strip binaries
      run: |
        ${{ env.STRIP }} --strip-unneeded ${{ env.OUTDIR }}/php/bin/php
        find ${{ env.OUTDIR }}/php/lib/ -name "*.so" -exec ${{ env.STRIP }} --strip-unneeded {} \;

    - name: üì¶ Package output
      run: |
        tar -czf php-full-arm32.tar.gz -C ${{ env.OUTDIR }} .

    - name: ‚òÅÔ∏è Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: php-full-arm32
        path: php-full-arm32.tar.gz
