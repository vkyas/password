name: Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      NDK_VERSION: r25c
      PHP_VERSION: 7.4.33
      API_LEVEL: 19
      WORKDIR: build-arm32
      OUTDIR: output-arm32
      TOOLCHAIN_DIR: arm-toolchain
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install host tools
      run: |
        sudo apt-get update
        sudo apt-get install -y autoconf automake libtool make wget unzip file python3 git

    - name: Download Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
        unzip -q android-ndk-r25c-linux.zip
        echo "ANDROID_NDK_HOME=$(pwd)/android-ndk-r25c" >> $GITHUB_ENV

    - name: Setup NDK toolchain in PATH
      run: |
        echo "${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
    
    - name: Set Android API and compiler vars
      run: |
        echo "ANDROID_API=19" >> $GITHUB_ENV
        echo "TARGET_HOST=armv7a-linux-androideabi" >> $GITHUB_ENV
        echo "CC=${TARGET_HOST}${ANDROID_API}-clang" >> $GITHUB_ENV
        echo "AR=arm-linux-androideabi-ar" >> $GITHUB_ENV
        echo "RANLIB=arm-linux-androideabi-ranlib" >> $GITHUB_ENV
        echo "STRIP=arm-linux-androideabi-strip" >> $GITHUB_ENV

    - name: Build OpenSSL for Android
      run: |
        git clone --depth 1 https://github.com/openssl/openssl.git
        cd openssl
        ./Configure android-arm -D__ANDROID_API__=$ANDROID_API --prefix=$(pwd)/output
        make -j$(nproc)
        make install_sw
        echo "OPENSSL_PREFIX=$(pwd)/output" >> $GITHUB_ENV
        
    - name: Create standalone toolchain
      run: |
        python3 $NDK_HOME/build/tools/make_standalone_toolchain.py \
          --arch arm --api $API_LEVEL --install-dir $TOOLCHAIN_DIR --force
        echo "SYSROOT=$(pwd)/${TOOLCHAIN_DIR}/sysroot" >> $GITHUB_ENV
        echo "PATH=$(pwd)/${TOOLCHAIN_DIR}/bin:$PATH" >> $GITHUB_ENV

    - name: Set cross-compile vars
      run: |
        echo "CC=arm-linux-androideabi-clang" >> $GITHUB_ENV
        echo "CXX=arm-linux-androideabi-clang++" >> $GITHUB_ENV
        echo "AR=arm-linux-androideabi-ar" >> $GITHUB_ENV
        echo "RANLIB=arm-linux-androideabi-ranlib" >> $GITHUB_ENV
        echo "STRIP=arm-linux-androideabi-strip" >> $GITHUB_ENV

    # Build cURL
    - name: Build cURL for Android
      run: |
        git clone --depth 1 https://github.com/curl/curl.git
        cd curl
        ./buildconf
        export PATH=$GITHUB_WORKSPACE/$TOOLCHAIN_DIR/bin:$PATH
        ./configure --host=arm-linux-androideabi \
          --with-ssl=$GITHUB_WORKSPACE/openssl/openssl-android \
          --disable-shared --enable-static \
          --prefix=$(pwd)/curl-android
        make -j$(nproc)
        make install
        echo "CURL_PREFIX=$(pwd)/curl-android" >> $GITHUB_ENV

    # (Similarly build libxml2, oniguruma, sqlite3, sodium, argon2 if needed;
    # set LIBXML2_PREFIX, ONIG_PREFIX, SQLITE3_PREFIX, SODIUM_PREFIX, ARGON2_PREFIX)

    - name: Download PHP source
      run: |
        wget -q https://www.php.net/distributions/php-${PHP_VERSION}.tar.gz
        tar -xzf php-${PHP_VERSION}.tar.gz

    - name: Create build directories
      run: |
        mkdir -p ${WORKDIR} ${OUTDIR}

    - name: Configure PHP
      working-directory: ${{ runner.workspace }}/$WORKDIR
      run: |
        export SYSROOT=${SYSROOT}
        export CC=arm-linux-androideabi-clang
        export AR=arm-linux-androideabi-ar
        export RANLIB=arm-linux-androideabi-ranlib
        # include all prefixes
        export OPENSSL_PREFIX=${OPENSSL_PREFIX}
        export CURL_PREFIX=${CURL_PREFIX}
        # If built libxml2: export LIBXML2_PREFIX=...
        # If built oniguruma: export ONIG_PREFIX=...
        # etc.
        export CFLAGS="-I$OPENSSL_PREFIX/include -I$CURL_PREFIX/include -Os -march=armv7-a -mfloat-abi=softfp -mfpu=neon -fPIE -fPIC"
        export LDFLAGS="-L$OPENSSL_PREFIX/lib -L$CURL_PREFIX/lib -Wl,--fix-cortex-a8 -Wl,--no-undefined -fPIE -pie"
        export CPPFLAGS="$CFLAGS"
        ../php-${PHP_VERSION}/configure \
          --host=arm-linux-androideabi \
          --prefix=/php \
          --disable-all \
          --enable-bcmath \
          --enable-mbstring \
          --enable-json \
          --enable-session \
          --enable-shmop \
          --enable-sockets \
          --enable-sysvmsg \
          --enable-sysvsem \
          --enable-sysvshm \
          --enable-dom \
          --enable-simplexml \
          --enable-xml \
          --enable-xmlreader \
          --enable-xmlwriter \
          --enable-phar \
          --enable-posix \
          --enable-tokenizer \
          --with-libxml=${LIBXML2_PREFIX:-/usr} \
          --with-zlib \
          --with-curl=$CURL_PREFIX \
          --without-pear \
          --with-openssl=$OPENSSL_PREFIX \
          --without-iconv \
          --without-pcre-jit \
          --disable-cgi \
          --disable-fpm \
          CFLAGS="$CFLAGS" \
          LDFLAGS="$LDFLAGS" \
          CPPFLAGS="$CPPFLAGS" \
          LIBS="-lz"
    - name: Build PHP
      working-directory: ${{ runner.workspace }}/$WORKDIR
      run: |
        make -j$(nproc)
        make install INSTALL_ROOT=$(pwd)/../${OUTDIR}

    - name: Post-install and strip
      run: |
        cp php-${PHP_VERSION}/php.ini-development ${OUTDIR}/php/lib/php.ini
        sed -i 's/;date.timezone =/date.timezone = UTC/' ${OUTDIR}/php/lib/php.ini
        sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' ${OUTDIR}/php/lib/php.ini
        arm-linux-androideabi-strip --strip-unneeded ${OUTDIR}/php/bin/php
        find ${OUTDIR}/php/lib/php/extensions -name "*.so" -exec arm-linux-androideabi-strip --strip-unneeded {} \;

    - name: Verify and package
      run: |
        file ${OUTDIR}/php/bin/php
        readelf -h ${OUTDIR}/php/bin/php | grep 'Machine:'
        tar -czf php-arm32-android.tar.gz -C ${OUTDIR} .
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: php-arm32-android
        path: php-arm32-android.tar.gz
        
