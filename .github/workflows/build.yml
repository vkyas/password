name: üõ†Ô∏è Build PHP for ARMv7a Android (Full Extensions)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: üì• Checkout repo
      uses: actions/checkout@v4

    - name: ‚öôÔ∏è Setup environment
      run: |
        echo "NDK_VERSION=r25c" >> $GITHUB_ENV
        echo "PHP_VERSION=7.4.33" >> $GITHUB_ENV
        echo "API_LEVEL=22" >> $GITHUB_ENV  # Android 5.1
        echo "WORKDIR=build-arm32" >> $GITHUB_ENV
        echo "OUTDIR=output-arm32" >> $GITHUB_ENV
        
        # Download NDK first to define paths correctly
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip
        echo "NDK_HOME=$(pwd)/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "TOOLCHAIN=${{ env.NDK_HOME }}/toolchains/llvm/prebuilt/linux-x86_64" >> $GITHUB_ENV
        echo "SYSROOT=${{ env.TOOLCHAIN }}/sysroot" >> $GITHUB_ENV
        echo "PREFIX=${{ env.SYSROOT }}/usr" >> $GITHUB_ENV

    - name: üß∞ Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          autoconf automake libtool pkg-config \
          bison re2c make wget unzip file \
          python3 zlib1g-dev libxml2-dev libsqlite3-dev \
          libonig-dev libzip-dev libssl-dev \
          libcurl4-openssl-dev libpng-dev libjpeg-dev \
          libfreetype6-dev libxpm-dev \
          libreadline-dev libargon2-dev cmake  # Added cmake

    - name: üõ†Ô∏è Setup toolchain
      run: |
        echo "CC=${{ env.TOOLCHAIN }}/bin/armv7a-linux-androideabi${{ env.API_LEVEL }}-clang" >> $GITHUB_ENV
        echo "CXX=${{ env.TOOLCHAIN }}/bin/armv7a-linux-androideabi${{ env.API_LEVEL }}-clang++" >> $GITHUB_ENV
        echo "AR=${{ env.TOOLCHAIN }}/bin/llvm-ar" >> $GITHUB_ENV
        echo "RANLIB=${{ env.TOOLCHAIN }}/bin/llvm-ranlib" >> $GITHUB_ENV
        echo "STRIP=${{ env.TOOLCHAIN }}/bin/llvm-strip" >> $GITHUB_ENV
        
        # Fixed flags with sysroot and ARM-specific optimizations
        echo "CFLAGS='-Os -march=armv7-a -mthumb -mfloat-abi=softfp -mfpu=neon -fPIE -fPIC -DLITTLE_ENDIAN=1234 -DBYTE_ORDER=LITTLE_ENDIAN --sysroot=${{ env.SYSROOT }}'" >> $GITHUB_ENV
        echo "LDFLAGS='-Wl,--fix-cortex-a8 -Wl,--no-undefined -fPIE -pie --sysroot=${{ env.SYSROOT }}'" >> $GITHUB_ENV
        echo "LIBS='-llog -lm -ldl'" >> $GITHUB_ENV
        echo "PATH=${{ env.TOOLCHAIN }}/bin:$PATH" >> $GITHUB_ENV

    - name: üìÑ Download PHP
      run: |
        wget -q https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz
        tar -xzf php-${{ env.PHP_VERSION }}.tar.gz
        echo "PHP_SOURCE=php-${{ env.PHP_VERSION }}" >> $GITHUB_ENV

    - name: üî® Build cross-compiled libraries
      run: |
        # Create library directory
        mkdir -p ${{ env.PREFIX }}/lib
        mkdir -p ${{ env.PREFIX }}/include

        # Build zlib
        wget -q https://zlib.net/zlib-1.3.tar.gz
        tar -xzf zlib-1.3.tar.gz
        cd zlib-1.3
        CC=${{ env.CC }} CFLAGS=${{ env.CFLAGS }} LDFLAGS=${{ env.LDFLAGS }} \
        ./configure --prefix=${{ env.PREFIX }} --static
        make -j$(nproc)
        make install
        cd ..

        # Build libxml2
        wget -q https://download.gnome.org/sources/libxml2/2.11/libxml2-2.11.5.tar.xz
        tar -xf libxml2-2.11.5.tar.xz
        cd libxml2-2.11.5
        CC=${{ env.CC }} CFLAGS="${{ env.CFLAGS }} -DNO_SOCKLEN_T" \
        LDFLAGS=${{ env.LDFLAGS }} ./configure \
          --host=arm-linux-androideabi \
          --prefix=${{ env.PREFIX }} \
          --without-python \
          --without-lzma \
          --enable-static \
          --disable-shared
        make -j$(nproc)
        make install
        cd ..

        # Build libpng
        wget -q https://download.sourceforge.net/libpng/libpng-1.6.40.tar.gz
        tar -xzf libpng-1.6.40.tar.gz
        cd libpng-1.6.40
        CC=${{ env.CC }} CFLAGS=${{ env.CFLAGS }} LDFLAGS=${{ env.LDFLAGS }} \
        ./configure --host=arm-linux-androideabi --prefix=${{ env.PREFIX }} --enable-static --disable-shared
        make -j$(nproc)
        make install
        cd ..

        # Build libjpeg-turbo
        wget -q https://downloads.sourceforge.net/libjpeg-turbo/libjpeg-turbo-2.1.5.1.tar.gz
        tar -xzf libjpeg-turbo-2.1.5.1.tar.gz
        cd libjpeg-turbo-2.1.5.1
        mkdir build && cd build
        cmake .. \
          -DCMAKE_SYSTEM_NAME=Linux \
          -DCMAKE_SYSTEM_PROCESSOR=armv7-a \
          -DCMAKE_C_COMPILER=${{ env.CC }} \
          -DCMAKE_C_FLAGS="${{ env.CFLAGS }}" \
          -DCMAKE_INSTALL_PREFIX=${{ env.PREFIX }} \
          -DENABLE_SHARED=OFF \
          -DENABLE_STATIC=ON
        make -j$(nproc)
        make install
        cd ../..

        # Build freetype
        wget -q https://download.savannah.gnu.org/releases/freetype/freetype-2.13.0.tar.xz
        tar -xf freetype-2.13.0.tar.xz
        cd freetype-2.13.0
        CC=${{ env.CC }} CFLAGS=${{ env.CFLAGS }} LDFLAGS=${{ env.LDFLAGS }} \
        ./configure --host=arm-linux-androideabi --prefix=${{ env.PREFIX }} --enable-static --disable-shared \
          --with-zlib=yes --with-png=yes --with-harfbuzz=no
        make -j$(nproc)
        make install
        cd ..

    - name: üóÇÔ∏è Create build directory
      run: |
        mkdir -p ${{ env.WORKDIR }}
        mkdir -p ${{ env.OUTDIR }}

    - name: ‚öôÔ∏è Configure PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        # Set environment variables
        export CC="${{ env.CC }}"
        export CXX="${{ env.CXX }}"
        export AR="${{ env.AR }}"
        export RANLIB="${{ env.RANLIB }}"
        export STRIP="${{ env.STRIP }}"
        export CFLAGS="${{ env.CFLAGS }}"
        export LDFLAGS="${{ env.LDFLAGS }} -L${{ env.PREFIX }}/lib"
        export LIBS="${{ env.LIBS }}"
        export CPPFLAGS="-I${{ env.PREFIX }}/include"

        # Run configure with corrected options
        ../${{ env.PHP_SOURCE }}/configure \
          --host=arm-linux-androideabi \
          --prefix=/php \
          --disable-all \
          --enable-mbstring \
          --enable-bcmath \
          --enable-json \
          --enable-session \
          --enable-posix \
          --enable-sockets \
          --enable-shmop \
          --enable-sysvmsg \
          --enable-sysvsem \
          --enable-sysvshm \
          --enable-tokenizer \
          --enable-xml \
          --enable-dom \
          --enable-simplexml \
          --enable-xmlreader \
          --enable-xmlwriter \
          --enable-soap \
          --enable-phar \
          --enable-fileinfo \
          --enable-calendar \
          --enable-ftp \
          --enable-exif \
          --enable-gd \
          --enable-opcache \
          --enable-zip \
          --with-zlib=${{ env.PREFIX }} \
          --with-iconv=php \
          --with-gd \
          --with-jpeg \
          --with-freetype \
          --with-png-dir=${{ env.PREFIX }} \
          --with-libxml=${{ env.PREFIX }} \
          --without-pear \
          --disable-cgi \
          --disable-fpm \
          --with-openssl=no \
          --with-curl=no

    - name: üß± Build PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        make -j$(nproc)
        make install INSTALL_ROOT=$(pwd)/../${{ env.OUTDIR }}

    - name: üßπ Post-install setup
      run: |
        # Copy php.ini
        cp ${{ env.PHP_SOURCE }}/php.ini-development ${{ env.OUTDIR }}/php/lib/php.ini
        
        # Basic php.ini configuration
        echo "date.timezone = UTC" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "display_errors = Off" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "short_open_tag = On" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "enable_dl = On" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension_dir = /php/lib/php/extensions/no-debug-non-zts-20190902" >> ${{ env.OUTDIR }}/php/lib/php.ini
        
        # Enable extensions
        echo "extension=bcmath.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=exif.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=gd.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=mbstring.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=phar.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=posix.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=shmop.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=soap.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=sockets.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=sysvmsg.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=sysvsem.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=sysvshm.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=xml.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=zip.so" >> ${{ env.OUTDIR }}/php/lib/php.ini

    - name: ‚úÇÔ∏è Strip binaries
      run: |
        ${{ env.STRIP }} --strip-unneeded ${{ env.OUTDIR }}/php/bin/php
        find ${{ env.OUTDIR }}/php/lib/ -name "*.so" -exec ${{ env.STRIP }} --strip-unneeded {} \;

    - name: üîç Verify build
      run: |
        file ${{ env.OUTDIR }}/php/bin/php
        ${{ env.TOOLCHAIN }}/bin/llvm-readelf -h ${{ env.OUTDIR }}/php/bin/php | grep 'Machine:'
        echo "PHP version:"
        ${{ env.OUTDIR }}/php/bin/php -v || echo "PHP binary verification failed"

    - name: üì¶ Package output
      run: |
        tar -czf php-arm32-full-android.tar.gz -C ${{ env.OUTDIR }} .

    - name: ‚òÅÔ∏è Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: php-arm32-android-full
        path: php-arm32-full-android.tar.gz
