name: üõ†Ô∏è Build PHP for ARMv7a Android (Full Extensions)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: üì• Checkout repo
      uses: actions/checkout@v4

    - name: ‚öôÔ∏è Setup environment
      run: |
        # Set environment variables with explicit quotes
        echo "NDK_VERSION=\"r25c\"" >> $GITHUB_ENV
        echo "PHP_VERSION=\"7.4.33\"" >> $GITHUB_ENV
        echo "API_LEVEL=\"22\"" >> $GITHUB_ENV
        echo "WORKDIR=\"build-arm32\"" >> $GITHUB_ENV
        echo "OUTDIR=\"output-arm32\"" >> $GITHUB_ENV
        echo "PREFIX=\"$(pwd)/install\"" >> $GITHUB_ENV
        
        # Construct and verify NDK URL
        NDK_URL="https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip"
        echo "NDK_URL=$NDK_URL"
        
        # Check if URL is accessible
        if ! curl -I "$NDK_URL" -f -s --head; then
          echo "Error: NDK URL is not accessible. Please verify the NDK version (r25c) or try a different version (e.g., r26d)."
          exit 1
        fi
        
        # Download NDK with verbose error output
        wget --tries=3 --verbose "$NDK_URL" -O android-ndk-${{ env.NDK_VERSION }}-linux.zip || {
          echo "NDK download failed. Check network connectivity or NDK version availability at https://developer

System: The response was cut off due to length constraints. Below is the complete "Setup environment" step integrated into the full workflow, ensuring all changes are applied correctly. I‚Äôll also address any potential follow-up issues and provide guidance on next steps.

### Complete Fixed Workflow
This is the full GitHub Actions workflow with the corrected "Setup environment" step, incorporating all previous fixes and maintaining the structure of your original workflow. The changes focus on resolving the NDK download issue, ensuring proper version handling, and adding robust error checking.

```yaml
name: üõ†Ô∏è Build PHP for ARMv7a Android (Full Extensions)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: üì• Checkout repo
      uses: actions/checkout@v4

    - name: ‚öôÔ∏è Setup environment
      run: |
        # Set environment variables with explicit quotes
        echo "NDK_VERSION=\"r25c\"" >> $GITHUB_ENV
        echo "PHP_VERSION=\"7.4.33\"" >> $GITHUB_ENV
        echo "API_LEVEL=\"22\"" >> $GITHUB_ENV
        echo "WORKDIR=\"build-arm32\"" >> $GITHUB_ENV
        echo "OUTDIR=\"output-arm32\"" >> $GITHUB_ENV
        echo "PREFIX=\"$(pwd)/install\"" >> $GITHUB_ENV
        
        # Construct and verify NDK URL
        NDK_URL="https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip"
        echo "NDK_URL=$NDK_URL"
        
        # Check if URL is accessible
        if ! curl -I "$NDK_URL" -f -s --head; then
          echo "Error: NDK URL is not accessible. Please verify the NDK version (r25c) or try a different version (e.g., r26d)."
          exit 1
        fi
        
        # Download NDK with verbose error output
        wget --tries=3 --verbose "$NDK_URL" -O android-ndk-${{ env.NDK_VERSION }}-linux.zip || {
          echo "NDK download failed. Check network connectivity or NDK version availability at https://developer.android.com/ndk/downloads."
          exit 1
        }
        
        # Unzip NDK
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip || {
          echo "NDK unzip failed. The downloaded ZIP file may be corrupt."
          exit 1
        }
        
        # Set NDK paths
        echo "NDK_HOME=\"$(pwd)/android-ndk-${{ env.NDK_VERSION }}\"" >> $GITHUB_ENV
        echo "TOOLCHAIN=\"${{ env.NDK_HOME }}/toolchains/llvm/prebuilt/linux-x86_64\"" >> $GITHUB_ENV
        echo "SYSROOT=\"${{ env.TOOLCHAIN }}/sysroot\"" >> $GITHUB_ENV
        
        # Verify paths for debugging
        echo "NDK_HOME=${{ env.NDK_HOME }}"
        echo "TOOLCHAIN=${{ env.TOOLCHAIN }}"
        echo "SYSROOT=${{ env.SYSROOT }}"
        echo "PREFIX=${{ env.PREFIX }}"

    - name: üß∞ Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          autoconf automake libtool pkg-config \
          bison re2c make wget unzip file \
          python3 zlib1g-dev libxml2-dev libsqlite3-dev \
          libonig-dev libzip-dev libssl-dev \
          libcurl4-openssl-dev libpng-dev libjpeg-dev \
          libfreetype6-dev libxpm-dev \
          libreadline-dev libargon2-dev cmake

    - name: üõ†Ô∏è Setup toolchain
      run: |
        echo "CC=\"${{ env.TOOLCHAIN }}/bin/armv7a-linux-androideabi${{ env.API_LEVEL }}-clang\"" >> $GITHUB_ENV
        echo "CXX=\"${{ env.TOOLCHAIN }}/bin/armv7a-linux-androideabi${{ env.API_LEVEL }}-clang++\"" >> $GITHUB_ENV
        echo "AR=\"${{ env.TOOLCHAIN }}/bin/llvm-ar\"" >> $GITHUB_ENV
        echo "RANLIB=\"${{ env.TOOLCHAIN }}/bin/llvm-ranlib\"" >> $GITHUB_ENV
        echo "STRIP=\"${{ env.TOOLCHAIN }}/bin/llvm-strip\"" >> $GITHUB_ENV
        
        # Optimized flags for ARMv7a
        echo "CFLAGS=\"-Os -march=armv7-a -mthumb -mfloat-abi=softfp -mfpu=neon -fPIE -fPIC -DLITTLE_ENDIAN=1234 -DBYTE_ORDER=LITTLE_ENDIAN --sysroot=${{ env.SYSROOT }}\"" >> $GITHUB_ENV
        echo "LDFLAGS=\"-Wl,--fix-cortex-a8 -Wl,--no-undefined -fPIE -pie --sysroot=${{ env.SYSROOT }}\"" >> $GITHUB_ENV
        echo "LIBS=\"-llog -lm -ldl\"" >> $GITHUB_ENV
        echo "PATH=\"${{ env.TOOLCHAIN }}/bin:$PATH\"" >> $GITHUB_ENV

    - name: üìÑ Download PHP
      run: |
        wget -q --tries=3 https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz || { echo "PHP download failed"; exit 1; }
        tar -xzf php-${{ env.PHP_VERSION }}.tar.gz || { echo "PHP unzip failed"; exit 1; }
        echo "PHP_SOURCE=\"php-${{ env.PHP_VERSION }}\"" >> $GITHUB_ENV

    - name: üî® Build cross-compiled libraries
      run: |
        mkdir -p ${{ env.PREFIX }}/lib
        mkdir -p ${{ env.PREFIX }}/include

        # Build zlib
        wget -q --tries=3 https://zlib.net/zlib-1.3.tar.gz || { echo "zlib download failed"; exit 1; }
        tar -xzf zlib-1.3.tar.gz || { echo "zlib unzip failed"; exit 1; }
        cd zlib-1.3
        CC=${{ env.CC }} CFLAGS=${{ env.CFLAGS }} LDFLAGS=${{ env.LDFLAGS }} \
        ./configure --prefix=${{ env.PREFIX }} --static || { echo "zlib configure failed"; exit 1; }
        make -j$(nproc) || { echo "zlib build failed"; exit 1; }
        make install || { echo "zlib install failed"; exit 1; }
        cd ..

        # Build libxml2
        wget -q --tries=3 https://download.gnome.org/sources/libxml2/2.11/libxml2-2.11.5.tar.xz || { echo "libxml2 download failed"; exit 1; }
        tar -xf libxml2-2.11.5.tar.xz || { echo "libxml2 unzip failed"; exit 1; }
        cd libxml2-2.11.5
        CC=${{ env.CC }} CFLAGS="${{ env.CFLAGS }} -DNO_SOCKLEN_T" \
        LDFLAGS=${{ env.LDFLAGS }} ./configure \
          --host=arm-linux-androideabi \
          --prefix=${{ env.PREFIX }} \
          --without-python \
          --without-lzma \
          --enable-static \
          --disable-shared || { echo "libxml2 configure failed"; exit 1; }
        make -j$(nproc) || { echo "libxml2 build failed"; exit 1; }
        make install || { echo "libxml2 install failed"; exit 1; }
        cd ..

        # Build libpng
        wget -q --tries=3 https://download.sourceforge.net/libpng/libpng-1.6.40.tar.gz || { echo "libpng download failed"; exit 1; }
        tar -xzf libpng-1.6.40.tar.gz || { echo "libpng unzip failed"; exit 1; }
        cd libpng-1.6.40
        CC=${{ env.CC }} CFLAGS=${{ env.CFLAGS }} LDFLAGS=${{ env.LDFLAGS }} \
        ./configure --host=arm-linux-androideabi --prefix=${{ env.PREFIX }} --enable-static --disable-shared || { echo "libpng configure failed"; exit 1; }
        make -j$(nproc) || { echo "libpng build failed"; exit 1; }
        make install || { echo "libpng install failed"; exit 1; }
        cd ..

        # Build libjpeg-turbo
        wget -q --tries=3 https://downloads.sourceforge.net/libjpeg-turbo/libjpeg-turbo-2.1.5.1.tar.gz || { echo "libjpeg-turbo download failed"; exit 1; }
        tar -xzf libjpeg-turbo-2.1.5.1.tar.gz || { echo "libjpeg-turbo unzip failed"; exit 1; }
        cd libjpeg-turbo-2.1.5.1
        mkdir build && cd build
        cmake .. \
          -DCMAKE_SYSTEM_NAME=Linux \
          -DCMAKE_SYSTEM_PROCESSOR=armv7-a \
          -DCMAKE_C_COMPILER=${{ env.CC }} \
          -DCMAKE_C_FLAGS="${{ env.CFLAGS }}" \
          -DCMAKE_INSTALL_PREFIX=${{ env.PREFIX }} \
          -DENABLE_SHARED=OFF \
          -DENABLE_STATIC=ON || { echo "libjpeg-turbo configure failed"; exit 1; }
        make -j$(nproc) || { echo "libjpeg-turbo build failed"; exit 1; }
        make install || { echo "libjpeg-turbo install failed"; exit 1; }
        cd ../..

        # Build freetype
        wget -q --tries=3 https://download.savannah.gnu.org/releases/freetype/freetype-2.13.0.tar.xz || { echo "freetype download failed"; exit 1; }
        tar -xf freetype-2.13.0.tar.xz || { echo "freetype unzip failed"; exit 1; }
        cd freetype-2.13.0
        CC=${{ env.CC }} CFLAGS=${{ env.CFLAGS }} LDFLAGS=${{ env.LDFLAGS }} \
        ./configure --host=arm-linux-androideabi --prefix=${{ env.PREFIX }} --enable-static --disable-shared \
          --with-zlib=${{ env.PREFIX }} --with-png=${{ env.PREFIX }} --with-harfbuzz=no || { echo "freetype configure failed"; exit 1; }
        make -j$(nproc) || { echo "freetype build failed"; exit 1; }
        make install || { echo "freetype install failed"; exit 1; }
        cd ..

    - name: üóÇÔ∏è Create build directory
      run: |
        mkdir -p ${{ env.WORKDIR }}
        mkdir -p ${{ env.OUTDIR }}

    - name: ‚öôÔ∏è Configure PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        export CC="${{ env.CC }}"
        export CXX="${{ env.CXX }}"
        export AR="${{ env.AR }}"
        export RANLIB="${{ env.RANLIB }}"
        export STRIP="${{ env.STRIP }}"
        export CFLAGS="${{ env.CFLAGS }}"
        export LDFLAGS="${{ env.LDFLAGS }} -L${{ env.PREFIX }}/lib"
        export LIBS="${{ env.LIBS }}"
        export CPPFLAGS="-I${{ env.PREFIX }}/include -I${{ env.PREFIX }}/include/libxml2"

        ../${{ env.PHP_SOURCE }}/configure \
          --host=arm-linux-androideabi \
          --prefix=/php \
          --disable-all \
          --enable-mbstring \
          --enable-bcmath \
          --enable-json \
          --enable-session \
          --enable-posix \
          --enable-sockets \
          --enable-shmop \
          --enable-sysvmsg \
          --enable-sysvsem \
          --enable-sysvshm \
          --enable-tokenizer \
          --enable-xml \
          --enable-dom \
          --enable-simplexml \
          --enable-xmlreader \
          --enable-xmlwriter \
          --enable-soap \
          --enable-phar \
          --enable-fileinfo \
          --enable-calendar \
          --enable-ftp \
          --enable-exif \
          --enable-gd \
          --enable-opcache \
          --enable-zip \
          --with-zlib=${{ env.PREFIX }} \
          --with-iconv=php \
          --with-gd \
          --with-jpeg=${{ env.PREFIX }} \
          --with-freetype=${{ env.PREFIX }} \
          --with-png-dir=${{ env.PREFIX }} \
          --with-libxml=${{ env.PREFIX }} \
          --without-pear \
          --disable-cgi \
          --disable-fpm \
          --with-openssl=no \
          --with-curl=no \
          2>&1 | tee configure.log || { echo "PHP configure failed"; cat configure.log; exit 1; }

    - name: üß± Build PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        make -j$(nproc) V=1 2>&1 | tee make.log || { echo "PHP build failed"; cat make.log; exit 1; }
        make install INSTALL_ROOT=$(pwd)/../${{ env.OUTDIR }} || { echo "PHP install failed"; exit 1; }

    - name: üßπ Post-install setup
      run: |
        # Copy php.ini
        cp ${{ env.PHP_SOURCE }}/php.ini-development ${{ env.OUTDIR }}/php/lib/php.ini
        
        # Basic php.ini configuration
        echo "date.timezone = UTC" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "display_errors = Off" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "short_open_tag = On" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "enable_dl = On" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension_dir = /php/lib/php/extensions/no-debug-non-zts-20190902" >> ${{ env.OUTDIR }}/php/lib/php.ini
        
        # Enable extensions
        echo "extension=bcmath.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=exif.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=gd.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=mbstring.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=phar.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=posix.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=shmop.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=soap.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=sockets.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=sysvmsg.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=sysvsem.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=sysvshm.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=xml.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        echo "extension=zip.so" >> ${{ env.OUTDIR }}/php/lib/php.ini

    - name: ‚úÇÔ∏è Strip binaries
      run: |
        ${{ env.STRIP }} --strip-unneeded ${{ env.OUTDIR }}/php/bin/php || { echo "Stripping PHP binary failed"; exit 1; }
        find ${{ env.OUTDIR }}/php/lib/ -name "*.so" -exec ${{ env.STRIP }} --strip-unneeded {} \;

    - name: üîç Verify build
      run: |
        file ${{ env.OUTDIR }}/php/bin/php
        ${{ env.TOOLCHAIN }}/bin/llvm-readelf -h ${{ env.OUTDIR }}/php/bin/php | grep 'Machine:'
        echo "PHP version:"
        ${{ env.OUTDIR }}/php/bin/php -v || { echo "PHP binary verification failed"; exit 1; }

    - name: üì¶ Package output
      run: |
        tar -czf php-arm32-full-android.tar.gz -C ${{ env.OUTDIR }} . || { echo "Packaging failed"; exit 1; }

    - name: ‚òÅÔ∏è Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: php-arm32-android-full
        path: php-arm32-full-android.tar.gz

    - name: ‚òÅÔ∏è Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          ${{ env.WORKDIR }}/configure.log
          ${{ env.WORKDIR }}/make.log
