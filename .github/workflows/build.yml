name: Build PHP for ARMv7a Android

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        echo "NDK_VERSION=r19c" >> $GITHUB_ENV
        echo "PHP_VERSION=7.4.33" >> $GITHUB_ENV
        echo "CURL_VERSION=8.8.0" >> $GITHUB_ENV
        echo "OPENSSL_VERSION=1.1.1w" >> $GITHUB_ENV
        echo "API_LEVEL=19" >> $GITHUB_ENV
        echo "WORKDIR=build-arm32" >> $GITHUB_ENV
        echo "OUTDIR=output-arm32" >> $GITHUB_ENV
        echo "TOOLCHAIN=${{ github.workspace }}/android-ndk-${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64" >> $GITHUB_ENV
        echo "SYSROOT=${{ github.workspace }}/android-ndk-${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot" >> $GITHUB_ENV
        echo "PREFIX=${{ github.workspace }}/android-ndk-${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          autoconf \
          automake \
          libtool \
          pkg-config \
          bison \
          re2c \
          make \
          wget \
          unzip \
          file \
          python3 \
          zlib1g-dev \
          libxml2-dev \
          libsqlite3-dev \
          libonig-dev

    - name: Download Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip
        echo "NDK_HOME=$(pwd)/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV

    - name: Setup compiler
      run: |
        echo "CC=${{ env.TOOLCHAIN }}/bin/armv7a-linux-androideabi${{ env.API_LEVEL }}-clang" >> $GITHUB_ENV
        echo "CXX=${{ env.TOOLCHAIN }}/bin/armv7a-linux-androideabi${{ env.API_LEVEL }}-clang++" >> $GITHUB_ENV
        echo "AR=${{ env.TOOLCHAIN }}/bin/llvm-ar" >> $GITHUB_ENV
        echo "RANLIB=${{ env.TOOLCHAIN }}/bin/llvm-ranlib" >> $GITHUB_ENV
        echo "STRIP=${{ env.TOOLCHAIN }}/bin/llvm-strip" >> $GITHUB_ENV
        echo "CFLAGS=\"-Os -march=armv7-a -mfloat-abi=softfp -mfpu=neon -fPIE -fPIC -I${{ env.PREFIX }}/include\"" >> $GITHUB_ENV
        echo "LDFLAGS=\"-Wl,--fix-cortex-a8 -Wl,--no-undefined -L${{ env.PREFIX }}/lib -fPIE -pie\"" >> $GITHUB_ENV
        echo "LIBS=\"-llog -landroid\"" >> $GITHUB_ENV
        echo "PATH=${{ env.TOOLCHAIN }}/bin:$PATH" >> $GITHUB_ENV

    - name: Build OpenSSL (Fixed)
      run: |
        wget -q https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
        tar -xzf openssl-${{ env.OPENSSL_VERSION }}.tar.gz
        cd openssl-${{ env.OPENSSL_VERSION }}
        
        # Gunakan toolchain NDK langsung
        export CC="${{ env.CC }}"
        export AR="${{ env.AR }}"
        export RANLIB="${{ env.RANLIB }}"
        export STRIP="${{ env.STRIP }}"
        
        # Konfigurasi dengan parameter yang benar
        ./Configure android-arm \
          -D__ANDROID_API__=${{ env.API_LEVEL }} \
          --prefix=${{ env.PREFIX }} \
          -latomic \
          no-shared \
          no-asm
        
        make depend
        make -j$(nproc) build_libs
        make install_sw

    - name: Build cURL
      run: |
        wget -q https://curl.se/download/curl-${{ env.CURL_VERSION }}.tar.gz
        tar -xzf curl-${{ env.CURL_VERSION }}.tar.gz
        cd curl-${{ env.CURL_VERSION }}
        
        ./configure \
          --host=arm-linux-androideabi \
          --prefix=${{ env.PREFIX }} \
          --with-ssl=${{ env.PREFIX }} \
          --disable-shared \
          --enable-static \
          --without-librtmp \
          --disable-ftp \
          --disable-ldap \
          --disable-ldaps \
          --disable-rtsp \
          --disable-proxy \
          --disable-dict \
          --disable-telnet \
          --disable-tftp \
          --disable-pop3 \
          --disable-imap \
          --disable-smtp \
          --disable-gopher \
          --disable-manual \
          --disable-ipv6 \
          --disable-verbose \
          --disable-sspi \
          --disable-crypto-auth \
          --disable-ntlm-wb \
          --disable-tls-srp \
          --disable-unix-sockets \
          --disable-cookies \
          --disable-http-auth \
          CC="$CC" CXX="$CXX" AR="$AR" RANLIB="$RANLIB" STRIP="$STRIP" \
          CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"
        
        make -j$(nproc)
        make install

    - name: Download PHP source
      run: |
        wget -q https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz
        tar -xzf php-${{ env.PHP_VERSION }}.tar.gz
        echo "PHP_SOURCE=php-${{ env.PHP_VERSION }}" >> $GITHUB_ENV

    - name: Create build environment
      run: |
        mkdir -p ${{ env.WORKDIR }}
        mkdir -p ${{ env.OUTDIR }}

    - name: Configure PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        ../${{ env.PHP_SOURCE }}/configure \
          --host=arm-linux-androideabi \
          --prefix=/php \
          --disable-all \
          --enable-bcmath \
          --enable-mbstring \
          --enable-json \
          --enable-session \
          --enable-shmop \
          --enable-sockets \
          --enable-sysvmsg \
          --enable-sysvsem \
          --enable-sysvshm \
          --enable-dom \
          --enable-simplexml \
          --enable-xml \
          --enable-xmlreader \
          --enable-xmlwriter \
          --enable-phar \
          --enable-posix \
          --enable-tokenizer \
          --with-libxml \
          --with-zlib \
          --with-curl=${{ env.PREFIX }} \
          --with-openssl=${{ env.PREFIX }} \
          --without-pear \
          --with-password-argon2 \
          --with-sodium \
          --without-iconv \
          --without-pcre-jit \
          --disable-cgi \
          --disable-fpm \
          --disable-mbregex \
          CFLAGS="$CFLAGS" \
          LDFLAGS="$LDFLAGS" \
          CPPFLAGS="-I${{ env.PREFIX }}/include" \
          LIBS="-lcurl -lssl -lcrypto -lz -ldl"

    - name: Build PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        make -j$(nproc)
        make install INSTALL_ROOT=$(pwd)/../${{ env.OUTDIR }}

    - name: Post-install steps
      run: |
        cp ${{ env.PHP_SOURCE }}/php.ini-development ${{ env.OUTDIR }}/php/lib/php.ini
        sed -i 's/;date.timezone =/date.timezone = UTC/' ${{ env.OUTDIR }}/php/lib/php.ini
        sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' ${{ env.OUTDIR }}/php/lib/php.ini
        
        # Salin library yang diperlukan
        cp ${{ env.PREFIX }}/lib/libcrypto.so.1.1 ${{ env.OUTDIR }}/php/lib/
        cp ${{ env.PREFIX }}/lib/libssl.so.1.1 ${{ env.OUTDIR }}/php/lib/
        cp ${{ env.PREFIX }}/lib/libcurl.so ${{ env.OUTDIR }}/php/lib/

    - name: Strip binaries
      run: |
        ${{ env.STRIP }} --strip-unneeded ${{ env.OUTDIR }}/php/bin/php
        find ${{ env.OUTDIR }}/php/lib/ -name "*.so" -exec ${{ env.STRIP }} --strip-unneeded {} \;

    - name: Verify binary
      run: |
        file ${{ env.OUTDIR }}/php/bin/php
        readelf -h ${{ env.OUTDIR }}/php/bin/php | grep 'Machine:'
        ldd ${{ env.OUTDIR }}/php/bin/php || true

    - name: Package artifacts
      run: |
        tar -czf php-arm32-android.tar.gz -C ${{ env.OUTDIR }} .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: php-arm32-android
        path: php-arm32-android.tar.gz
