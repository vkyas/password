name: Build PHP for ARMv7a Android

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    env:
      NDK_VERSION: r25c
      PHP_VERSION: 7.4.33
      CURL_VERSION: 8.8.0
      OPENSSL_VERSION: 1.1.1w
      API_LEVEL: 19
      WORKDIR: build-arm32
      OUTDIR: output-arm32
      TOOLCHAIN_DIR: arm-toolchain
      SYSROOT: ${{ github.workspace }}/arm-toolchain/sysroot
      PREFIX: ${{ github.workspace }}/arm-toolchain/sysroot/usr

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          autoconf automake libtool pkg-config \
          bison re2c make wget unzip file python3 \
          zlib1g-dev libxml2-dev libsqlite3-dev libonig-dev

    - name: Download Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip
        echo "NDK_HOME=${{ github.workspace }}/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV
    
    - name: Create standalone toolchain
      run: |
        ${{ env.NDK_HOME }}/build/tools/make_standalone_toolchain.py \
          --arch arm \
          --api ${{ env.API_LEVEL }} \
          --install-dir ${{ env.TOOLCHAIN_DIR }} \
          --force

    - name: Build OpenSSL
      run: |
        wget -q https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
        tar -xzf openssl-${{ env.OPENSSL_VERSION }}.tar.gz
        cd openssl-${{ env.OPENSSL_VERSION }}

        export ANDROID_NDK_HOME=${{ env.NDK_HOME }}
        export PATH=${{ env.TOOLCHAIN_PATH }}:$PATH
        export CC=clang
        export AR=arm-linux-androideabi-ar
        export RANLIB=arm-linux-androideabi-ranlib
        export STRIP=arm-linux-androideabi-strip

        ./Configure android-arm \
          CC=clang \
          -D__ANDROID_API__=${{ env.API_LEVEL }} \
          --prefix=${{ env.PREFIX }} \
          -latomic \
          no-shared no-asm -fPIE -fPIC

        make depend
        make -j$(nproc) build_libs
        make install_sw
      shell: bash

    - name: Build cURL
      run: |
        wget -q https://curl.se/download/curl-${{ env.CURL_VERSION }}.tar.gz
        tar -xzf curl-${{ env.CURL_VERSION }}.tar.gz
        cd curl-${{ env.CURL_VERSION }}

        ./configure \
          --host=arm-linux-androideabi \
          --prefix=${{ env.PREFIX }} \
          --with-ssl=${{ env.PREFIX }} \
          --disable-shared --enable-static \
          CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ \
          AR=arm-linux-androideabi-ar \
          RANLIB=arm-linux-androideabi-ranlib \
          STRIP=arm-linux-androideabi-strip \
          CFLAGS="${{ env.CFLAGS }}" LDFLAGS="${{ env.LDFLAGS }}" \
          --without-librtmp --disable-ftp --disable-ldap \
          --disable-ldaps --disable-rtsp --disable-proxy \
          --disable-dict --disable-telnet --disable-tftp \
          --disable-pop3 --disable-imap --disable-smtp \
          --disable-gopher --disable-manual --disable-ipv6 \
          --disable-unix-sockets --disable-cookies \
          --disable-http-auth --disable-crypto-auth \
          --disable-ntlm-wb --disable-tls-srp

        make -j$(nproc)
        make install

    - name: Download PHP source
      run: |
        wget -q https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz
        tar -xzf php-${{ env.PHP_VERSION }}.tar.gz
        echo "PHP_SOURCE=php-${{ env.PHP_VERSION }}" >> $GITHUB_ENV

    - name: Configure & Build PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        mkdir -p ../${{ env.OUTDIR }}
        ../${{ env.PHP_SOURCE }}/configure \
          --host=arm-linux-androideabi \
          --prefix=/php \
          --disable-all \
          --enable-bcmath --enable-mbstring --enable-json \
          --enable-session --enable-shmop --enable-sockets \
          --enable-sysvmsg --enable-sysvsem --enable-sysvshm \
          --enable-dom --enable-simplexml --enable-xml \
          --enable-xmlreader --enable-xmlwriter --enable-phar \
          --enable-posix --enable-tokenizer \
          --with-libxml --with-zlib \
          --with-curl=${{ env.PREFIX }} \
          --with-openssl=${{ env.PREFIX }} \
          --without-pear --with-password-argon2 \
          --with-sodium --without-iconv --without-pcre-jit \
          --disable-cgi --disable-fpm \
          CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" CPPFLAGS="-I${{ env.PREFIX }}/include" \
          LIBS="-lcurl -lssl -lcrypto -lz -ldl"

        make -j$(nproc)
        make install INSTALL_ROOT=$(pwd)/../${{ env.OUTDIR }}

    - name: Post-install & Strip
      run: |
        cp ${{ env.PHP_SOURCE }}/php.ini-development ${{ env.OUTDIR }}/php/lib/php.ini
        sed -i 's/;date.timezone =/date.timezone = UTC/' ${{ env.OUTDIR }}/php/lib/php.ini
        sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' ${{ env.OUTDIR }}/php/lib/php.ini

        cp ${{ env.PREFIX }}/lib/libcrypto.so.1.1 ${{ env.OUTDIR }}/php/lib/
        cp ${{ env.PREFIX }}/lib/libssl.so.1.1 ${{ env.OUTDIR }}/php/lib/
        cp ${{ env.PREFIX }}/lib/libcurl.so ${{ env.OUTDIR }}/php/lib/

        arm-linux-androideabi-strip --strip-unneeded ${{ env.OUTDIR }}/php/bin/php
        find ${{ env.OUTDIR }}/php/lib/ -name "*.so" -exec arm-linux-androideabi-strip --strip-unneeded {} \;

    - name: Package artifact
      run: |
        tar -czf php-arm32-android.tar.gz -C ${{ env.OUTDIR }} .
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: php-arm32-android
        path: php-arm32-android.tar.gz
