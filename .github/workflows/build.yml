name: Build PHP for Android ARM32

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: 📥 Checkout repo
      uses: actions/checkout@v4

    - name: ⚙️ Setup environment variables
      run: |
        echo "NDK_VERSION=r25c" >> $GITHUB_ENV
        echo "PHP_VERSION=8.4.8" >> $GITHUB_ENV
        echo "API_LEVEL=22" >> $GITHUB_ENV
        echo "WORKDIR=build-arm32" >> $GITHUB_ENV
        echo "OUTDIR=output-arm32" >> $GITHUB_ENV
        echo "NDK_HOME=$GITHUB_WORKSPACE/android-ndk-$NDK_VERSION" >> $GITHUB_ENV
        echo "HOST_TRIPLE=armv7a-linux-androideabi" >> $GITHUB_ENV
        echo "EXTENSION_DIR=/data/adb/php7/files/bin" >> $GITHUB_ENV
        echo "ZEND_EXTENSION_DIR=no-debug-non-zts-20190902" >> $GITHUB_ENV

    - name: 🧰 Install build dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          autoconf automake libtool pkg-config \
          bison re2c make wget unzip file \
          python3 zlib1g-dev libxml2-dev libsqlite3-dev \
          libonig-dev libzip-dev libssl-dev \
          libcurl4-openssl-dev libpng-dev libjpeg-dev \
          libfreetype6-dev libxpm-dev libxslt1-dev \
          libreadline-dev libldap2-dev libargon2-dev \
          cmake ninja-build

    - name: 📦 Download Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip

    - name: 🛠️ Setup toolchain environment
      run: |
        TOOLCHAIN="${{ env.NDK_HOME }}/toolchains/llvm/prebuilt/linux-x86_64"
        SYSROOT="$TOOLCHAIN/sysroot"
        PREFIX="$SYSROOT/usr"

        echo "TOOLCHAIN=$TOOLCHAIN" >> $GITHUB_ENV
        echo "SYSROOT=$SYSROOT" >> $GITHUB_ENV
        echo "PREFIX=$PREFIX" >> $GITHUB_ENV
        echo "PHP_ICONV=yes" >> $GITHUB_ENV

        echo "CC=$TOOLCHAIN/bin/${{ env.HOST_TRIPLE }}${{ env.API_LEVEL }}-clang" >> $GITHUB_ENV
        echo "CXX=$TOOLCHAIN/bin/${{ env.HOST_TRIPLE }}${{ env.API_LEVEL }}-clang++" >> $GITHUB_ENV
        echo "AR=$TOOLCHAIN/bin/llvm-ar" >> $GITHUB_ENV
        echo "RANLIB=$TOOLCHAIN/bin/llvm-ranlib" >> $GITHUB_ENV
        echo "STRIP=$TOOLCHAIN/bin/llvm-strip" >> $GITHUB_ENV
        echo "CFLAGS=-Os -march=armv7-a -mfloat-abi=softfp -mfpu=neon -fPIE -fPIC -I$PREFIX/include" >> $GITHUB_ENV
        echo "LDFLAGS=-L$PREFIX/lib -Wl,--fix-cortex-a8 -Wl,--no-undefined -fPIE -pie -liconv -lxml2 -lz -lm -landroid -llog" >> $GITHUB_ENV
        echo "LIBS=-llog -landroid -lm" >> $GITHUB_ENV
        echo "PATH=$TOOLCHAIN/bin:$PATH" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig" >> $GITHUB_ENV
        
    - name: 🔤 Build libxml2
      run: |
        wget -q https://download.gnome.org/sources/libxml2/2.10/libxml2-2.10.3.tar.xz
        tar -xf libxml2-2.10.3.tar.xz
        cd libxml2-2.10.3
        ./configure \
          --host=${{ env.HOST_TRIPLE }} \
          --prefix=${{ env.PREFIX }} \
          --disable-shared \
          --enable-static \
          --without-python \
          --without-lzma \
          CC=${{ env.CC }} \
          CFLAGS="${{ env.CFLAGS }}" \
          LDFLAGS="${{ env.LDFLAGS }}"
        make -j$(nproc)
        make install
        cd ..

    - name: 🔤 Build libiconv
      run: |
        wget -q https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.17.tar.gz
        tar -xzf libiconv-1.17.tar.gz
        cd libiconv-1.17

        ./configure \
          --host=${{ env.HOST_TRIPLE }} \
          --prefix=${{ env.PREFIX }} \
          --disable-shared \
          --enable-static \
          --disable-nls \
          CC=${{ env.CC }} \
          CFLAGS="${{ env.CFLAGS }}" \
          LDFLAGS="${{ env.LDFLAGS }}"

        make -j$(nproc)
        make install
        cd ..

    - name: ✅ Verify critical libraries
      run: |
        ls -l ${{ env.PREFIX }}/lib/libiconv.a || { echo "libiconv not found!"; exit 1; }
        ls -l ${{ env.PREFIX }}/lib/libxml2.a || { echo "libxml2 not found!"; exit 1; }
        ls -l ${{ env.PREFIX }}/include/iconv.h || { echo "iconv.h not found!"; exit 1; }

    - name: 🔤 Build libjpeg-turbo
      run: |
        wget -q https://downloads.sourceforge.net/libjpeg-turbo/libjpeg-turbo-2.1.5.tar.gz
        tar -xzf libjpeg-turbo-2.1.5.tar.gz
        cd libjpeg-turbo-2.1.5
        mkdir build && cd build
        cmake .. \
          -DCMAKE_SYSTEM_NAME=Android \
          -DCMAKE_SYSTEM_VERSION=${{ env.API_LEVEL }} \
          -DCMAKE_ANDROID_ARCH_ABI=armeabi-v7a \
          -DCMAKE_ANDROID_NDK=${{ env.NDK_HOME }} \
          -DCMAKE_ANDROID_STL_TYPE=c++_static \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ env.PREFIX }} \
          -DENABLE_SHARED=OFF \
          -DENABLE_STATIC=ON
        make -j$(nproc)
        make install
        cd ../..

    - name: 🔤 Build libpng
      run: |
        wget -q https://download.sourceforge.net/libpng/libpng-1.6.39.tar.gz
        tar -xzf libpng-1.6.39.tar.gz
        cd libpng-1.6.39
        ./configure --host=${{ env.HOST_TRIPLE }} --prefix=${{ env.PREFIX }} --disable-shared --enable-static \
          CC=${{ env.CC }} CFLAGS="${{ env.CFLAGS }}" LDFLAGS="${{ env.LDFLAGS }}"
        make -j$(nproc)
        make install
        cd ..

    - name: 🔤 Build freetype
      run: |
        wget -q https://download.savannah.gnu.org/releases/freetype/freetype-2.13.0.tar.gz
        tar -xzf freetype-2.13.0.tar.gz
        cd freetype-2.13.0
        ./configure --host=${{ env.HOST_TRIPLE }} --prefix=${{ env.PREFIX }} --disable-shared --enable-static --without-brotli --without-harfbuzz \
          CC=${{ env.CC }} CFLAGS="${{ env.CFLAGS }}" LDFLAGS="${{ env.LDFLAGS }}"
        make -j$(nproc)
        make install
        cd ..
        
    - name: 🔤 Build Oniguruma
      run: |
        wget -q https://github.com/kkos/oniguruma/releases/download/v6.9.8/onig-6.9.8.tar.gz
        tar -xzf onig-6.9.8.tar.gz
        cd onig-6.9.8
        ./configure --host=${{ env.HOST_TRIPLE }} --prefix=${{ env.PREFIX }} --disable-shared --enable-static \
          CC=${{ env.CC }} CFLAGS="${{ env.CFLAGS }}" LDFLAGS="${{ env.LDFLAGS }}"
        make -j$(nproc)
        make install
        cd ..

    - name: 📄 Download PHP source
      run: |
        wget -q https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz
        tar -xzf php-${{ env.PHP_VERSION }}.tar.gz
        echo "PHP_SOURCE=php-${{ env.PHP_VERSION }}" >> $GITHUB_ENV

    - name: 🗂️ Prepare build directories
      run: |
        mkdir -p ${{ env.WORKDIR }}
        mkdir -p ${{ env.OUTDIR }}

    - name: ⚙️ Configure PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        set -ex
        
        # Set environment variables
        export CC="${{ env.CC }}"
        export CXX="${{ env.CXX }}"
        export AR="${{ env.AR }}"
        export RANLIB="${{ env.RANLIB }}"
        export STRIP="${{ env.STRIP }}"
        export CPPFLAGS="-I${{ env.PREFIX }}/include"
        export CFLAGS="${{ env.CFLAGS }}"
        export LDFLAGS="${{ env.LDFLAGS }}"
        export LIBS="${{ env.LIBS }}"
        export PKG_CONFIG_PATH="${{ env.PKG_CONFIG_PATH }}"
        export PHP_ICONV="yes"
        export ICONV_DIR="${{ env.PREFIX }}"
        
        # Run configure
        ../${{ env.PHP_SOURCE }}/configure \
          --build=x86_64-pc-linux-gnu \
          --host=${{ env.HOST_TRIPLE }} \
          --prefix=/data/php \
          --with-libxml \
          --with-zlib \
          --with-iconv=${{ env.PREFIX }} \
          --with-gd \
          --with-jpeg=${{ env.PREFIX }} \
          --with-png=${{ env.PREFIX }} \
          --with-freetype=${{ env.PREFIX }} \
          --with-libxml=${{ env.PREFIX }} \
          --with-onig=${{ env.PREFIX }} \
          --disable-all \
          --enable-mbstring \
          --enable-bcmath \
          --enable-session \
          --enable-posix \
          --enable-sockets \
          --enable-shmop \
          --enable-sysvmsg \
          --enable-sysvsem \
          --enable-sysvshm \
          --enable-tokenizer \
          --enable-xml \
          --enable-dom \
          --enable-simplexml \
          --enable-xmlreader \
          --enable-xmlwriter \
          --enable-soap \
          --enable-phar \
          --enable-fileinfo \
          --enable-calendar \
          --enable-ftp \
          --enable-exif \
          --enable-opcache \
          --enable-ctype \
          --without-bz2 \
          --without-xsl \
          --without-readline \
          --without-ldap \
          --without-pdo-pgsql \
          --without-pear \
          --disable-cgi \
          --disable-fpm

        # Check config.log if configure fails
        if [ $? -ne 0 ]; then
          echo "::error::PHP configure failed!"
          echo "=== Last 50 lines of config.log ==="
          tail -n 50 config.log
          echo "=== Error sections from config.log ==="
          grep -i -A20 -B20 "error" config.log || true
          exit 1
        fi
        
    - name: 🧱 Build PHP
      working-directory: ${{ env.WORKDIR }}
      run: |
        make -j$(nproc)
        make install INSTALL_ROOT=$(pwd)/../${{ env.OUTDIR }}

    - name: 🧹 Post-install setup
      run: |
        # Create necessary directories
        mkdir -p ${{ env.OUTDIR }}/php/lib/php/extensions/${{ env.ZEND_EXTENSION_DIR }}
        mkdir -p ${{ env.OUTDIR }}/php/bin

        # Setup php.ini
        cp ${{ env.PHP_SOURCE }}/php.ini-development ${{ env.OUTDIR }}/php/lib/php.ini
        {
          echo "date.timezone = UTC"
          echo "display_errors = Off"
          echo "short_open_tag = On"
          echo "enable_dl = On"
          echo "extension_dir = \"${{ env.EXTENSION_DIR }}\""
          echo "zend_extension=opcache.so"
        } >> ${{ env.OUTDIR }}/php/lib/php.ini

        # Move extensions and enable them
        mv ${{ env.OUTDIR }}/php/lib/php/extensions/${{ env.ZEND_EXTENSION_DIR }}/*.so ${{ env.OUTDIR }}/php/bin/ || true
        
        # Enable all built extensions
        for ext in ${{ env.OUTDIR }}/php/bin/*.so; do
          ext_name=$(basename $ext .so)
          echo "extension=$ext_name.so" >> ${{ env.OUTDIR }}/php/lib/php.ini
        done

    - name: 🧹 Strip binaries
      run: |
        ${{ env.STRIP }} --strip-unneeded ${{ env.OUTDIR }}/php/bin/php || true
        find ${{ env.OUTDIR }}/php/bin/ -name "*.so" -exec ${{ env.STRIP }} --strip-unneeded {} \; || true

    - name: 📦 Package output
      run: |
        tar -czf php-android-arm32-${{ env.PHP_VERSION }}.tar.gz -C ${{ env.OUTDIR }} .

    - name: ☁️ Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: php-android-arm32-${{ env.PHP_VERSION }}
        path: php-android-arm32-${{ env.PHP_VERSION }}.tar.gz
