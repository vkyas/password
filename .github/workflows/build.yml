name: Build PHP for Android (ARMv7)

on:
  workflow_dispatch:

env:
  NDK_VERSION: r26d
  PHP_VERSION: 8.3.8
  API_LEVEL: 22
  HOST_TRIPLE: armv7a-linux-androideabi
  WORKDIR: ${{ github.workspace }}/build-arm32
  OUTDIR: ${{ github.workspace }}/output-arm32

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: üì• Checkout repo
      uses: actions/checkout@v4

    - name: üß∞ Install Build Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          autoconf automake libtool pkg-config \
          bison re2c make wget unzip file \
          python3 cmake patch

    - name: üì¶ Download Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
        unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip
        echo "NDK_HOME=${{ github.workspace }}/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV

    - name: üõ†Ô∏è Setup Toolchain Environment
      run: |
        TOOLCHAIN="${{ env.NDK_HOME }}/toolchains/llvm/prebuilt/linux-x86_64"
        PREFIX="${{ github.workspace }}/sysroot-arm32"
        mkdir -p $PREFIX

        echo "TOOLCHAIN=$TOOLCHAIN" >> $GITHUB_ENV
        echo "PREFIX=$PREFIX" >> $GITHUB_ENV
        
        echo "CC=$TOOLCHAIN/bin/${{ env.HOST_TRIPLE }}${{ env.API_LEVEL }}-clang" >> $GITHUB_ENV
        echo "CXX=$TOOLCHAIN/bin/${{ env.HOST_TRIPLE }}${{ env.API_LEVEL }}-clang++" >> $GITHUB_ENV
        echo "AR=$TOOLCHAIN/bin/llvm-ar" >> $GITHUB_ENV
        echo "RANLIB=$TOOLCHAIN/bin/llvm-ranlib" >> $GITHUB_ENV
        echo "STRIP=$TOOLCHAIN/bin/llvm-strip" >> $GITHUB_ENV
        
        echo "CFLAGS=--sysroot=$TOOLCHAIN/sysroot -I$PREFIX/include -Os -fPIC" >> $GITHUB_ENV
        echo "LDFLAGS=--sysroot=$TOOLCHAIN/sysroot -L$PREFIX/lib -Wl,-rpath-link=$PREFIX/lib -pie" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig" >> $GITHUB_ENV
        echo "PATH=$TOOLCHAIN/bin:$PATH" >> $GITHUB_ENV

    - name: üî§ Build zlib
      run: |
        wget -q https://zlib.net/zlib-1.3.1.tar.gz
        tar -xzf zlib-1.3.1.tar.gz
        cd zlib-1.3.1
        ./configure --prefix=${{ env.PREFIX }} --static
        make -j$(nproc)
        make install

    - name: üî§ Build OpenSSL (Robust Method)
      run: |
        wget -q https://www.openssl.org/source/openssl-3.3.1.tar.gz
        tar -xzf openssl-3.3.1.tar.gz
        cd openssl-3.3.1
        export PATH="${{ env.TOOLCHAIN }}/bin:$PATH"
        ./Configure linux-armv4 \
          -D__ANDROID_API__=${{ env.API_LEVEL }} \
          --prefix=${{ env.PREFIX }} \
          no-shared \
          no-tests
        make -j$(nproc)
        make install_sw

    - name: üî§ Build libiconv
      run: |
        wget -q https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.17.tar.gz
        tar -xzf libiconv-1.17.tar.gz
        cd libiconv-1.17
        ./configure --host=${{ env.HOST_TRIPLE }} --prefix=${{ env.PREFIX }} --disable-shared --enable-static
        make -j$(nproc)
        make install

    - name: üî§ Build libxml2
      run: |
        wget -q https://download.gnome.org/sources/libxml2/2.12/libxml2-2.12.7.tar.xz
        tar -xf libxml2-2.12.7.tar.xz
        cd libxml2-2.12.7
        ./configure --host=${{ env.HOST_TRIPLE }} --prefix=${{ env.PREFIX }} \
          --disable-shared --enable-static --without-python \
          --with-zlib=${{ env.PREFIX }} --without-lzma
        make -j$(nproc)
        make install

    - name: üî§ Build Oniguruma (for mbstring)
      run: |
        wget -q https://github.com/kkos/oniguruma/releases/download/v6.9.9/onig-6.9.9.tar.gz
        tar -xzf onig-6.9.9.tar.gz
        cd onig-6.9.9
        ./configure --host=${{ env.HOST_TRIPLE }} --prefix=${{ env.PREFIX }} --disable-shared --enable-static
        make -j$(nproc)
        make install

    - name: üìÑ Download PHP source
      run: |
        wget -q https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz
        tar -xzf php-${{ env.PHP_VERSION }}.tar.gz
        echo "PHP_SOURCE_DIR=php-${{ env.PHP_VERSION }}" >> $GITHUB_ENV

    - name: ü©π Apply Android DNS Compatibility Patch
      run: |
        # METODE FINAL: Membuat file patch secara dinamis untuk menghindari semua error manual.
        echo "--- a/ext/standard/dns.c
        +++ b/ext/standard/dns.c
        @@ -29,6 +29,22 @@
         #include \"ext/standard/basic_functions.h\"
         #include \"ext/standard/php_dns.h\"
         
        +#ifdef __ANDROID__
        +/*
        + * Bionic (Androids C library) has a different DNS resolver API.
        + * It lacks the thread-safe res_n* functions and other features
        + * that PHPs DNS code expects from a glibc-like environment.
        + * This compatibility layer maps the expected functions to whats
        + * available on Bionic.
        + */
        +#include <resolv.h>
        +#include <sys/param.h>
        +#include <netdb.h> /* for dn_skipname */
        +#include <arpa/nameser_compat.h>
        +#define res_nsearch(res, dname, Class, type, answer, anslen) res_search(dname, Class, type, answer, anslen)
        +#define res_ninit(res) res_init()
        +#define res_nclose(res) /* Bionics res_close is not public */
        +#endif
        +
         #if HAVE_DNS_H
         #include <dns.h>
         #endif" > ~/android_dns.patch

        echo "Applying DNS patch..."
        patch -p1 -d ${{ env.PHP_SOURCE_DIR }} < ~/android_dns.patch

    - name: ‚öôÔ∏è Configure PHP
      run: |
        cd ${{ env.PHP_SOURCE_DIR }}
        ./buildconf --force
        
        ./configure \
          --build=x86_64-pc-linux-gnu \
          --host=${{ env.HOST_TRIPLE }} \
          --prefix=${{ env.OUTDIR }} \
          --with-config-file-path=${{ env.OUTDIR }}/ini \
          --with-config-file-scan-dir=${{ env.OUTDIR }}/conf.d \
          --disable-all \
          --enable-cli \
          --with-zlib=shared \
          --with-openssl \
          --with-libxml=shared \
          --with-iconv=${{ env.PREFIX }} \
          --enable-bcmath=shared \
          --enable-calendar=shared \
          --enable-ctype=shared \
          --enable-dom=shared \
          --enable-exif=shared \
          --enable-fileinfo=shared \
          --enable-filter=shared \
          --enable-ftp=shared \
          --enable-mbstring=shared \
          --enable-phar=shared \
          --enable-posix=shared \
          --enable-session=shared \
          --enable-sockets=shared \
          --enable-tokenizer=shared \
          --enable-xml=shared \
          --enable-xmlreader=shared \
          --enable-xmlwriter=shared \
          --enable-simplexml=shared \
          --enable-opcache=shared

    - name: üß± Build PHP
      run: |
        cd ${{ env.PHP_SOURCE_DIR }}
        make -j$(nproc)
        make install

    - name: üßπ Post-install setup and Package
      run: |
        ${{ env.STRIP }} --strip-unneeded ${{ env.OUTDIR }}/bin/php
        find ${{ env.OUTDIR }} -name "*.so" -exec ${{ env.STRIP }} --strip-unneeded {} \;

        PHP_INI_DIR=${{ env.OUTDIR }}/ini
        mkdir -p $PHP_INI_DIR
        cp ${{ env.PHP_SOURCE_DIR }}/php.ini-production $PHP_INI_DIR/php.ini

        ZTS_DIR="no-debug-non-zts-20230831"
        
        echo "date.timezone = UTC" >> $PHP_INI_DIR/php.ini
        echo "extension_dir = \"${{ env.OUTDIR }}/lib/php/extensions/$ZTS_DIR\"" >> $PHP_INI_DIR/php.ini
        
        tar -czvf php-android-arm32.tar.gz -C ${{ env.OUTDIR }} .

    - name: ‚òÅÔ∏è Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: php-android-arm32
        path: php-android-arm32.tar.gz
