name: Build PHP for ARMv7a Android

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      # Versi dan target
      NDK_VERSION: r25c
      PHP_VERSION: 7.4.33
      API_LEVEL: 19
      TARGET: armv7a-linux-androideabi
      WORKDIR: build-arm32
      OUTDIR: output-arm32
      TOOLCHAIN_DIR: arm-linux-androideabi-toolchain

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf \
            automake \
            libtool \
            pkg-config \
            bison \
            re2c \
            make \
            wget \
            unzip \
            file \
            python3

      - name: Download Android NDK
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip
          unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip
          echo "NDK_HOME=$(pwd)/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV

      - name: Create standalone toolchain
        run: |
          # Buat standalone toolchain untuk ARMv7a
          python3 ${{ env.NDK_HOME }}/build/tools/make_standalone_toolchain.py \
            --arch arm \
            --api ${{ env.API_LEVEL }} \
            --install-dir ${{ env.TOOLCHAIN_DIR }} \
            --force
          echo "TOOLCHAIN_PATH=$(pwd)/${{ env.TOOLCHAIN_DIR }}/bin" >> $GITHUB_ENV
          echo "SYSROOT=$(pwd)/${{ env.TOOLCHAIN_DIR }}/sysroot" >> $GITHUB_ENV
          echo "PATH=$(pwd)/${{ env.TOOLCHAIN_DIR }}/bin:$PATH" >> $GITHUB_ENV

      - name: Setup compiler env
        run: |
          echo "CC=arm-linux-androideabi-clang" >> $GITHUB_ENV
          echo "CXX=arm-linux-androideabi-clang++" >> $GITHUB_ENV
          echo "AR=arm-linux-androideabi-ar" >> $GITHUB_ENV
          echo "RANLIB=arm-linux-androideabi-ranlib" >> $GITHUB_ENV
          echo "STRIP=arm-linux-androideabi-strip" >> $GITHUB_ENV

      - name: Test compiler
        run: |
          echo 'int main() { return 0; }' > test.c
          arm-linux-androideabi-clang test.c -o test -pie
          file test

      - name: Download PHP source
        run: |
          wget -q https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz
          tar -xzf php-${{ env.PHP_VERSION }}.tar.gz
          echo "PHP_SOURCE=php-${{ env.PHP_VERSION }}" >> $GITHUB_ENV

      - name: Create build directories
        run: |
          mkdir -p ${{ env.WORKDIR }}
          mkdir -p ${{ env.OUTDIR }}

      - name: Download Oniguruma source
        working-directory: ${{ env.WORKDIR }}
        run: |
          wget -q https://github.com/kkos/oniguruma/releases/download/v6.9.10/oniguruma-6.9.10.tar.gz
          tar -xzf oniguruma-6.9.10.tar.gz
          mv oniguruma-6.9.10 oniguruma-src

      - name: Build Oniguruma for ARM
        working-directory: ${{ env.WORKDIR }}/oniguruma-src
        env:
          CC: arm-linux-androideabi-clang
          AR: arm-linux-androideabi-ar
          RANLIB: arm-linux-androideabi-ranlib
          SYSROOT: ${{ env.SYSROOT }}
        run: |
          export CFLAGS="--sysroot=$SYSROOT -Os -march=armv7-a -mfloat-abi=softfp -mfpu=neon -fPIC"
          export LDFLAGS="--sysroot=$SYSROOT -fPIC"
          ./configure \
            --host=arm-linux-androideabi \
            --build=x86_64-linux-gnu \
            --prefix=$(pwd)/onig-install
          make -j$(nproc)
          make install

      - name: Export Oniguruma env
        run: |
          echo "ONIG_INCLUDE=${{ env.WORKDIR }}/oniguruma-src/onig-install/include" >> $GITHUB_ENV
          echo "ONIG_LIB=${{ env.WORKDIR }}/oniguruma-src/onig-install/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${{ env.WORKDIR }}/oniguruma-src/onig-install/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "ONIG_CFLAGS=-I${{ env.WORKDIR }}/oniguruma-src/onig-install/include" >> $GITHUB_ENV
          echo "ONIG_LIBS=-L${{ env.WORKDIR }}/oniguruma-src/onig-install/lib -lonig" >> $GITHUB_ENV

      - name: Configure PHP
        working-directory: ${{ env.WORKDIR }}
        env:
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
          AR: ${{ env.AR }}
          RANLIB: ${{ env.RANLIB }}
          SYSROOT: ${{ env.SYSROOT }}
          ONIG_CFLAGS: ${{ env.ONIG_CFLAGS }}
          ONIG_LIBS: ${{ env.ONIG_LIBS }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        run: |
          ../${{ env.PHP_SOURCE }}/configure \
            --host=arm-linux-androideabi \
            --build=x86_64-linux-gnu \
            --prefix=/php \
            --disable-all \
            --enable-mbstring \
            --enable-json \
            --enable-session \
            --enable-dom \
            --enable-simplexml \
            --enable-xml \
            --enable-xmlreader \
            --enable-xmlwriter \
            --enable-phar \
            --enable-posix \
            --enable-tokenizer \
            --with-libxml \
            --with-zlib \
            --without-iconv \
            --without-pcre-jit \
            --disable-cgi \
            --disable-fpm \
            CFLAGS="-Os -march=armv7-a -mfloat-abi=softfp -mfpu=neon -fPIE -fPIC -I$SYSROOT/usr/include $ONIG_CFLAGS" \
            LDFLAGS="-Wl,--fix-cortex-a8 -Wl,--no-undefined -L$SYSROOT/usr/lib -llog -landroid -fPIE -pie $ONIG_LIBS" \
            CPPFLAGS="-I$SYSROOT/usr/include $ONIG_CFLAGS" \
            LIBS="-lz $ONIG_LIBS"

      - name: Build PHP
        working-directory: ${{ env.WORKDIR }}
        run: |
          make -j$(nproc)
          make install INSTALL_ROOT=$(pwd)/../${{ env.OUTDIR }}

      - name: Strip binaries
        run: |
          arm-linux-androideabi-strip --strip-unneeded ${{ env.OUTDIR }}/php/bin/php
          find ${{ env.OUTDIR }}/php/lib/php/extensions -name "*.so" -exec arm-linux-androideabi-strip --strip-unneeded {} \;

      - name: Verify binary
        run: |
          file ${{ env.OUTDIR }}/php/bin/php
          readelf -h ${{ env.OUTDIR }}/php/bin/php | grep 'Machine:'

      - name: Package artifact
        run: |
          tar -czf php-arm32-android.tar.gz -C ${{ env.OUTDIR }} .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: php-arm32-android
          path: php-arm32-android.tar.gz
